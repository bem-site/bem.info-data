{"uk":{"name":"functions","examples":[],"description":""},"ru":{"name":"functions","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"functions-2\"><a href=\"#functions-2\" class=\"article__heading-anchor\"></a>functions</h1><p>Блок предоставляет объект, содержащий набор методов для работы с функциями JavaScript.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"Обзор-37\"><a href=\"#Обзор-37\" class=\"article__heading-anchor\"></a>Обзор</h2><h3 class=\"article__heading article__heading_3\" id=\"Свойства-и-методы-объекта-46\"><a href=\"#Свойства-и-методы-объекта-46\" class=\"article__heading-anchor\"></a>Свойства и методы объекта</h3><table>\n<thead>\n<tr>\n<th>Имя</th>\n<th>Тип или возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#fields-isFunction\">isFunction</a>(<code>obj</code> <code>{*}</code>)</td>\n<td><code>{Boolean}</code></td>\n<td>Проверяет, является ли переданный аргумент функцией.</td>\n</tr>\n<tr>\n<td><a href=\"#fields-noop\">noop</a></td>\n<td><code>{Function}</code></td>\n<td>Пустая функция.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Элементы-блока-34\"><a href=\"#Элементы-блока-34\" class=\"article__heading-anchor\"></a>Элементы блока</h3><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Способы использования</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-debounce\">debounce</a></td>\n<td><code>JS</code></td>\n<td>Декоратор функции. Объединяет несколько вызовов функции, производимых в заданном временном интервале, в один.</td>\n</tr>\n<tr>\n<td><a href=\"#elems-throttle\">throttle</a></td>\n<td><code>JS</code></td>\n<td>Декоратор функции. Ограничивает частоту выполнения функции до одного раза в указанный период.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Публичные-технологии-блока-46\"><a href=\"#Публичные-технологии-блока-46\" class=\"article__heading-anchor\"></a>Публичные технологии блока</h3><p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"Подробности-27\"><a href=\"#Подробности-27\" class=\"article__heading-anchor\"></a>Подробности</h2><p><a name=\"fields\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Свойства-и-методы-объекта-47\"><a href=\"#Свойства-и-методы-объекта-47\" class=\"article__heading-anchor\"></a>Свойства и методы объекта</h3><p><a name=\"fields-isFunction\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Метод-isfunction-2\"><a href=\"#Метод-isfunction-2\" class=\"article__heading-anchor\"></a>Метод <code>isFunction</code></h4><p>Метод проверяет, является ли переданный аргумент функцией.  </p>\n<p>Принимаемые аргументы: </p>\n<ul>\n<li><code>obj</code> <code>{*}</code> – проверяемый объект. Обязательный аргумент.</li>\n</ul>\n<p>Возвращаемое значение: <code>{Boolean}</code>. В случае, если аргумент является функцией – <code>true</code>.</p>\n<pre><code class=\"lang-js\">modules.require(<span class=\"hljs-string\">'functions'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">func</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{},\n        b = {};\n    <span class=\"hljs-built_in\">console</span>.log(func.isFunction(a)); <span class=\"hljs-comment\">// true</span>\n    <span class=\"hljs-built_in\">console</span>.log(func.isFunction(b)); <span class=\"hljs-comment\">// false</span>\n});\n</code></pre>\n<p><a name=\"fields-noop\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Свойство-noop-2\"><a href=\"#Свойство-noop-2\" class=\"article__heading-anchor\"></a>Свойство <code>noop</code></h4><p>Пустая функция (<code>function() {}</code>).</p>\n<p>Не имеет аргументов и возвращаемого значения.</p>\n<p><code>noop</code> можно использовать в ситуациях, когда для работы требуется функция, но нет смысла добавлять логику. Например в качестве «заглушки» для базовых классов при проектировании в парадигме ООП.</p>\n<pre><code class=\"lang-js\">modules.define(<span class=\"hljs-string\">'base-class'</span>, [<span class=\"hljs-string\">'inherit'</span>, <span class=\"hljs-string\">'functions'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">provide, inherit, functions</span>) </span>{\n\nprovide(inherit({\n    <span class=\"hljs-attr\">getData</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>._sendRequest();\n    },\n\n    <span class=\"hljs-attr\">_sendRequest</span> : functions.noop\n}));\n\n});\n</code></pre>\n<p><a name=\"elems\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Элементы-блока-35\"><a href=\"#Элементы-блока-35\" class=\"article__heading-anchor\"></a>Элементы блока</h3><p>Элементы блока реализуют набор декораторов функций.</p>\n<p>Декораторы добавляют функции логику, не меняя ее оригинальной сигнатуры.</p>\n<p><a name=\"elems-debounce\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Элемент-debounce-2\"><a href=\"#Элемент-debounce-2\" class=\"article__heading-anchor\"></a>Элемент <code>debounce</code></h4><p>Декоратор, откладывающий вызовов функции до истечения задержки. После каждой попытки вызова задержка начинает отсчитываться заново. </p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>fn</code> <code>{Function}</code> — оригинальная функция. Обязательный аргумент.</li>\n<li><code>timeout</code> <code>{Number}</code> — время задержки в миллисекундах. Обязательный аргумент.</li>\n<li>[<code>invokeAsap</code> <code>{Boolean}</code>] — режим работы <code>debounce</code>. По умолчанию используется первый режим (соответствует значению <code>false</code>).</li>\n<li>[<code>context</code> <code>{Object}</code>] — контекст для выполнения оригинальной функции.</li>\n</ul>\n<p>В зависимости от значения аргумента <code>invokeAsap</code> <code>debounce</code> может работать в двух режимах:</p>\n<ol>\n<li>Вызов оригинальной функции производится по истечению задержки после последней попытки вызова.</li>\n<li>Первый вызов оригинальной функции производится сразу же при вызове декорированной функции. Дальнейшее поведение аналогично режиму 1.</li>\n</ol>\n<p>Возвращаемое значение: <code>{Function}</code>. Декорированная функция.</p>\n<pre><code class=\"lang-js\">modules.require(<span class=\"hljs-string\">'functions__debounce'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">provide, debounce</span>) </span>{\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello!'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> debouncedLog = debounce(log, <span class=\"hljs-number\">300</span>);\nsetInterval(debouncedLog, <span class=\"hljs-number\">50</span>);\n\n});\n</code></pre>\n<p><a name=\"elems-throttle\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Элемент-throttle-2\"><a href=\"#Элемент-throttle-2\" class=\"article__heading-anchor\"></a>Элемент <code>throttle</code></h4><p>Декоратор позволяет «затормозить» функцию. Она будет выполняться не чаще одного раза в указанный период, сколько бы раз в течение этого периода ни была вызвана. Все промежуточные вызовы игнорируются.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>fn</code> <code>{Function}</code> — оригинальная функция. Обязательный аргумент.</li>\n<li><code>period</code> <code>{Number}</code> — интервал между вызовами в миллисекундах. Обязательный аргумент.</li>\n<li>[<code>context</code> <code>{Object}</code>] — контекст для выполнения оригинальной функции.</li>\n</ul>\n<p>Возвращаемое значение: <code>{Function}</code>. Декорированная функция.</p>\n<p>Метод удобно использовать, например, для установки ресурсоемких обработчиков для часто генерируемых событий – <code>resize</code>, <code>pointermove</code> и т.п.</p>\n<pre><code class=\"lang-js\">modules.require(<span class=\"hljs-string\">'functions__throttle'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">provide, throttle</span>) </span>{\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello!'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> throttledLog = throttle(log, <span class=\"hljs-number\">300</span>);\nsetInterval(throttledLog, <span class=\"hljs-number\">50</span>);\n\n});\n</code></pre>\n<p>В результате, функция будет выполняться не чаще чем раз в 300 миллисекунд.</p>\n"},"en":{"name":"functions","examples":[],"description":""}}
