{"uk":{"name":"inherit","examples":[],"description":"","bemjsonDescription":""},"ru":{"name":"inherit","examples":[],"description":"<h1 id=\"inherit-4\"><a href=\"#inherit-4\" class=\"anchor\"></a>inherit</h1>\n<p>Блок предоставляет функцию, реализующую механизмы для объявления и наследования классов.</p>\n<h2 id=\"Обзор-39\"><a href=\"#Обзор-39\" class=\"anchor\"></a>Обзор</h2>\n<h3 id=\"Способы-использования-функции-4\"><a href=\"#Способы-использования-функции-4\" class=\"anchor\"></a>Способы использования функции</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Способ</th>\n<th>Сигнатура</th>\n<th>Тип возвращаемого значения</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#runmode-declare\">Объявление базового класса</a></td>\n<td>inherit(<br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Служит для создания (декларации), базового класса на основе свойств объекта.</td>\n</tr>\n<tr>\n<td><a href=\"#runmode-extend\">Создание производного класса</a></td>\n<td>inherit(<br><code>BaseClass {Function}</code>&#124;<code>{Array}</code>, <br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Позволяет наследовать и доопределять свойства и методы базового класса.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Специальные-поля-объявляемого-класса-4\"><a href=\"#Специальные-поля-объявляемого-класса-4\" class=\"anchor\"></a>Специальные поля объявляемого класса</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Имя</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#constructor\">__constructor</a></td>\n<td><code>Function</code></td>\n<td>Функция, которая будет вызвана в ходе создании экземпляра класса.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Специальные-поля-экземпляра-объявляемого-класса-4\"><a href=\"#Специальные-поля-экземпляра-объявляемого-класса-4\" class=\"anchor\"></a>Специальные поля экземпляра объявляемого класса</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Поле</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#self\">__self</a></td>\n<td><code>*</code></td>\n<td>Позволяет получить доступ к классу из его экземпляра.</td>\n</tr>\n<tr>\n<td><a href=\"#base\">__base</a></td>\n<td><code>Function</code></td>\n<td>Позволяет внутри производного класса использовать методы базового (supercall).</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Публичные-технологии-блока-49\"><a href=\"#Публичные-технологии-блока-49\" class=\"anchor\"></a>Публичные технологии блока</h3>\n<p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"Описание-31\"><a href=\"#Описание-31\" class=\"anchor\"></a>Описание</h2>\n<p>Функция <code>inherit</code> позволяет:</p>\n<ul>\n<li>создавать класс по декларации;</li>\n<li>задавать метод-конструктор;</li>\n<li>использовать миксины;</li>\n<li>вызывать методы базовой реализации (super call);</li>\n<li>получать доступ к статическим свойствам класса из его экземпляра.</li>\n</ul>\n<p>Блок является основой механизма наследования блоков в <code>bem-core</code>.</p>\n<p>Функция полиморфна и, в зависимости от типа первого аргумента, может быть использована для:</p>\n<ul>\n<li>тип <code>Object</code> – объявления базового класса.</li>\n<li>тип <code>Function</code> – создания производного класса на основе базового.</li>\n</ul>\n<p>Сигнатуры других аргументов функции зависят от способа выполнения.</p>\n<h3 id=\"Способы-использования-функции-5\"><a href=\"#Способы-использования-функции-5\" class=\"anchor\"></a>Способы использования функции</h3>\n<p><a name=\"runmode-declare\"></a></p>\n<h4 id=\"Объявление-базового-класса-2\"><a href=\"#Объявление-базового-класса-2\" class=\"anchor\"></a>Объявление базового класса</h4>\n<p>Способ позволяет объявить базовый класс, передав функции объект со свойствами класса.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>props {Object}</code> – объект с собственными свойствами базового класса. Обязательный аргумент.</li>\n<li>[<code>staticProps {Object}</code>] – объект со статическими свойствами базового класса.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>Function</code>. Полностью сформированный класс.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar props = {}, // объект свойств базового класса\n    baseClass = inherit(props); // базовый класс\n\n});\n</code></pre>\n<h5 id=\"Базовый-класс-со-статическими-свойствами-2\"><a href=\"#Базовый-класс-со-статическими-свойствами-2\" class=\"anchor\"></a>Базовый класс со статическими свойствами</h5>\n<p>Свойства объекта <code>staticProps</code> добавляются как статические к создаваемому классу.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit(props, {\n    callMe : function() {\n        console.log(&#39;mr.Static&#39;);\n    }\n});\n\nA.callMe(); // mr.Static\n\n});\n</code></pre>\n<h5 id=\"Специальные-поля-объявляемого-класса-5\"><a href=\"#Специальные-поля-объявляемого-класса-5\" class=\"anchor\"></a>Специальные поля объявляемого класса</h5>\n<p><a name=\"constructor\"></a></p>\n<h6 id=\"Поле-__constructor-2\"><a href=\"#Поле-__constructor-2\" class=\"anchor\"></a>Поле <code>__constructor</code></h6>\n<p>Тип: <code>Function</code>.</p>\n<p>Объект собственных свойств базового класса может содержать зарезервированное свойство <code>__constructor</code> – функцию, которая будет автоматически вызвана при создании экземпляра класса.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n        __constructor : function(property) { // конструктор\n            this.property = property;\n        },\n\n        getProperty : function() {\n            return this.property + &#39; of instanceA&#39;;\n        }\n    }),\n    aInst = new A(&#39;Property&#39;);\n\naInst.getProperty(); // Property of instanceA\n\n});\n</code></pre>\n<p><a name=\"runmode-extend\"></a></p>\n<h4 id=\"Создание-производного-класса-2\"><a href=\"#Создание-производного-класса-2\" class=\"anchor\"></a>Создание производного класса</h4>\n<p>Способ позволяет создать производный класс на основе базового класса и объектов статических и собственных свойств.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>BaseClass {Function} | {Array}</code> – базовый класс. Может быть массивом функций-миксинов. Обязательный аргумент.</li>\n<li><code>props {Object}</code> – собственные свойства (добавляются к прототипу). Обязательный аргумент.</li>\n<li>[<code>staticProps {Object}</code>] – статические свойства.</li>\n</ul>\n<p>Если один из объектов содержит свойства, которые уже есть в базовом классе – свойства базового класса будут переопределены.</p>\n<p><strong>Возвращаемое значение:</strong> <code>Function</code>. Производный класс.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getType : function() {\n        return &#39;A&#39;;\n    }\n});\n\n// класс, производный от A\nvar B = inherit(A, {\n    getType : function() { // переопределение + &#39;super&#39; call\n        return this.__base() + &#39;B&#39;;\n    }\n});\n\nvar instanceOfB = new B();\n\ninstanceOfB.getType(); // возвращает &#39;AB&#39;\n\n});\n</code></pre>\n<h5 id=\"Создание-производного-класса-с-миксинами-2\"><a href=\"#Создание-производного-класса-с-миксинами-2\" class=\"anchor\"></a>Создание производного класса с миксинами</h5>\n<p>При объявлении производного класса можно указать дополнительный набор функций. Их свойства будут примешаны к создаваемому классу. Для этого первым аргументом <code>inherit</code> нужно указать массив, первым элементом которого должен быть базовый класс, а последующими – примешиваемые функции.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getA : function() {\n        return &#39;A&#39;;\n    }\n});\n\nvar B = inherit({\n    getB : function() {\n        return &#39;B&#39;;\n    }\n});\n\n// класс, производный от A и B\nvar C = inherit([A, B], {\n    getAll : function() {\n        return this.getA() + this.getB();\n    }\n});\n\nvar instanceOfC = new C();\n\ninstanceOfC.getAll(); // возвращает &#39;AB&#39;\n\n});\n</code></pre>\n<h5 id=\"Специальные-поля-экземпляра-объявляемого-класса-5\"><a href=\"#Специальные-поля-экземпляра-объявляемого-класса-5\" class=\"anchor\"></a>Специальные поля экземпляра объявляемого класса</h5>\n<p><a name=\"self\"></a></p>\n<h6 id=\"Поле-__self-2\"><a href=\"#Поле-__self-2\" class=\"anchor\"></a>Поле <code>__self</code></h6>\n<p>Тип: <code>*</code>.</p>\n<p>Позволяет получить доступ к классу из его экземпляра.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n        getStaticProperty : function() {\n            return this.__self.staticMethod; // доступ к статическим методам\n        }\n    }, {\n        staticProperty : &#39;staticA&#39;,\n\n        staticMethod : function() {\n            return this.staticProperty;\n        }\n    }),\n    aInst = new A();\n\naInst.getStaticProperty(); //staticA\n\n});\n</code></pre>\n<p><a name=\"base\"></a></p>\n<h6 id=\"__base-4\"><a href=\"#__base-4\" class=\"anchor\"></a><code>__base</code></h6>\n<p>Тип: <code>Function</code>.</p>\n<p>Позволяет внутри производного класса вызывать одноименные методы базового (supercall). При использовании в статическом методе, будет вызван одноименный статический метод базового класса.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getType : function() {\n        return &#39;A&#39;;\n    }\n}, {\n    staticProperty : &#39;staticA&#39;,\n\n    staticMethod : function() {\n        return this.staticProperty;\n    }\n});\n\n// класс, производный от A\nvar B = inherit(A, {\n    getType : function() { // переопределение + &#39;super&#39; call\n        return this.__base() + &#39;B&#39;;\n    }\n}, {\n    staticMethod : function() { // статическое переопределение + &#39;super&#39; call\n        return this.__base() + &#39; of staticB&#39;;\n    }\n});\n\nvar instanceOfB = new B();\n\ninstanceOfB.getType(); // возвращает &#39;AB&#39;\nB.staticMethod(); // возвращает &#39;staticA of staticB&#39;\n\n});\n</code></pre>\n<p><a name=\"extra-examples\"></a></p>\n<h3 id=\"Дополнительные-примеры-2\"><a href=\"#Дополнительные-примеры-2\" class=\"anchor\"></a>Дополнительные примеры</h3>\n<p>Дополнительные примеры смотрите в репозитории библиотеки <a href=\"https://github.com/dfilatov/inherit\">inherit</a>.</p>\n","bemjsonDescription":"{\n    \"block\": \"md-root\",\n    \"content\": [\n        {\n            \"level\": 1,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 1\n            },\n            \"content\": \"inherit\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Блок предоставляет функцию, реализующую механизмы для объявления и наследования классов.\"\n        },\n        {\n            \"level\": 2,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 2\n            },\n            \"content\": \"Обзор\"\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Способы использования функции\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Способ\",\n                    \"Сигнатура\",\n                    \"Тип возвращаемого значения\",\n                    \"Описание\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#runmode-declare\\\">\"\n                        },\n                        \"Объявление базового класса\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    [\n                        \"inherit(\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"props {Object}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"[staticProps {Object}]\"\n                        },\n                        \")\"\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Служит для создания (декларации), базового класса на основе свойств объекта.\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#runmode-extend\\\">\"\n                        },\n                        \"Создание производного класса\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    [\n                        \"inherit(\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"BaseClass {Function}\"\n                        },\n                        \"|\",\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"{Array}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"props {Object}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"[staticProps {Object}]\"\n                        },\n                        \")\"\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Позволяет наследовать и доопределять свойства и методы базового класса.\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Специальные поля объявляемого класса\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Имя\",\n                    \"Тип данных\",\n                    \"Описание\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#constructor\\\">\"\n                        },\n                        \"__constructor\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Функция, которая будет вызвана в ходе создании экземпляра класса.\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Специальные поля экземпляра объявляемого класса\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Поле\",\n                    \"Тип данных\",\n                    \"Описание\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#self\\\">\"\n                        },\n                        \"__self\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"*\"\n                    },\n                    \"Позволяет получить доступ к классу из его экземпляра.\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#base\\\">\"\n                        },\n                        \"__base\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Позволяет внутри производного класса использовать методы базового (supercall).\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Публичные технологии блока\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Блок реализован в технологиях:\"\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": {\n                \"loose\": false,\n                \"checked\": null,\n                \"block\": \"list-item\",\n                \"content\": {\n                    \"block\": \"paragraph\",\n                    \"content\": {\n                        \"block\": \"inline-code\",\n                        \"content\": \"vanilla.js\"\n                    }\n                }\n            }\n        },\n        {\n            \"level\": 2,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 2\n            },\n            \"content\": \"Описание\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Функция \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"inherit\"\n                },\n                \" позволяет:\"\n            ]\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"создавать класс по декларации;\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"задавать метод-конструктор;\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"использовать миксины;\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"вызывать методы базовой реализации (super call);\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"получать доступ к статическим свойствам класса из его экземпляра.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Блок является основой механизма наследования блоков в \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"bem-core\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Функция полиморфна и, в зависимости от типа первого аргумента, может быть использована для:\"\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            \"тип \",\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"Object\"\n                            },\n                            \" – объявления базового класса.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            \"тип \",\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"Function\"\n                            },\n                            \" – создания производного класса на основе базового.\"\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Сигнатуры других аргументов функции зависят от способа выполнения.\"\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Способы использования функции\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"runmode-declare\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 4,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 4\n            },\n            \"content\": \"Объявление базового класса\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Способ позволяет объявить базовый класс, передав функции объект со свойствами класса.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": {\n                \"block\": \"strong\",\n                \"content\": \"Принимаемые аргументы:\"\n            }\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"props {Object}\"\n                            },\n                            \" – объект с собственными свойствами базового класса. Обязательный аргумент.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \" – объект со статическими свойствами базового класса.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"strong\",\n                    \"content\": \"Возвращаемое значение:\"\n                },\n                \" \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \". Полностью сформированный класс.\"\n            ]\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar props = {}, // объект свойств базового класса\\n    baseClass = inherit(props); // базовый класс\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Базовый класс со статическими свойствами\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Свойства объекта \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"staticProps\"\n                },\n                \" добавляются как статические к создаваемому классу.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit(props, {\\n    callMe : function() {\\n        console.log('mr.Static');\\n    }\\n});\\n\\nA.callMe(); // mr.Static\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Специальные поля объявляемого класса\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"constructor\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": [\n                \"Поле \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__constructor\"\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Тип: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Объект собственных свойств базового класса может содержать зарезервированное свойство \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__constructor\"\n                },\n                \" – функцию, которая будет автоматически вызвана при создании экземпляра класса.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n        __constructor : function(property) { // конструктор\\n            this.property = property;\\n        },\\n\\n        getProperty : function() {\\n            return this.property + ' of instanceA';\\n        }\\n    }),\\n    aInst = new A('Property');\\n\\naInst.getProperty(); // Property of instanceA\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"runmode-extend\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 4,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 4\n            },\n            \"content\": \"Создание производного класса\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Способ позволяет создать производный класс на основе базового класса и объектов статических и собственных свойств.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": {\n                \"block\": \"strong\",\n                \"content\": \"Принимаемые аргументы:\"\n            }\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"BaseClass {Function} | {Array}\"\n                            },\n                            \" – базовый класс. Может быть массивом функций-миксинов. Обязательный аргумент.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"props {Object}\"\n                            },\n                            \" – собственные свойства (добавляются к прототипу). Обязательный аргумент.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \" – статические свойства.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Если один из объектов содержит свойства, которые уже есть в базовом классе – свойства базового класса будут переопределены.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"strong\",\n                    \"content\": \"Возвращаемое значение:\"\n                },\n                \" \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \". Производный класс.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getType : function() {\\n        return 'A';\\n    }\\n});\\n\\n// класс, производный от A\\nvar B = inherit(A, {\\n    getType : function() { // переопределение + 'super' call\\n        return this.__base() + 'B';\\n    }\\n});\\n\\nvar instanceOfB = new B();\\n\\ninstanceOfB.getType(); // возвращает 'AB'\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Создание производного класса с миксинами\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"При объявлении производного класса можно указать дополнительный набор функций. Их свойства будут примешаны к создаваемому классу. Для этого первым аргументом \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"inherit\"\n                },\n                \" нужно указать массив, первым элементом которого должен быть базовый класс, а последующими – примешиваемые функции.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getA : function() {\\n        return 'A';\\n    }\\n});\\n\\nvar B = inherit({\\n    getB : function() {\\n        return 'B';\\n    }\\n});\\n\\n// класс, производный от A и B\\nvar C = inherit([A, B], {\\n    getAll : function() {\\n        return this.getA() + this.getB();\\n    }\\n});\\n\\nvar instanceOfC = new C();\\n\\ninstanceOfC.getAll(); // возвращает 'AB'\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Специальные поля экземпляра объявляемого класса\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"self\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": [\n                \"Поле \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__self\"\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Тип: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"*\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Позволяет получить доступ к классу из его экземпляра.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n        getStaticProperty : function() {\\n            return this.__self.staticMethod; // доступ к статическим методам\\n        }\\n    }, {\\n        staticProperty : 'staticA',\\n\\n        staticMethod : function() {\\n            return this.staticProperty;\\n        }\\n    }),\\n    aInst = new A();\\n\\naInst.getStaticProperty(); //staticA\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"base\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": {\n                \"block\": \"inline-code\",\n                \"content\": \"__base\"\n            }\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Тип: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Позволяет внутри производного класса вызывать одноименные методы базового (supercall). При использовании в статическом методе, будет вызван одноименный статический метод базового класса.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Пример:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getType : function() {\\n        return 'A';\\n    }\\n}, {\\n    staticProperty : 'staticA',\\n\\n    staticMethod : function() {\\n        return this.staticProperty;\\n    }\\n});\\n\\n// класс, производный от A\\nvar B = inherit(A, {\\n    getType : function() { // переопределение + 'super' call\\n        return this.__base() + 'B';\\n    }\\n}, {\\n    staticMethod : function() { // статическое переопределение + 'super' call\\n        return this.__base() + ' of staticB';\\n    }\\n});\\n\\nvar instanceOfB = new B();\\n\\ninstanceOfB.getType(); // возвращает 'AB'\\nB.staticMethod(); // возвращает 'staticA of staticB'\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"extra-examples\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Дополнительные примеры\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Дополнительные примеры смотрите в репозитории библиотеки \",\n                {\n                    \"href\": \"https://github.com/dfilatov/inherit\",\n                    \"block\": \"link\",\n                    \"content\": \"inherit\"\n                },\n                \".\"\n            ]\n        }\n    ]\n}"},"en":{"name":"inherit","examples":[],"description":"<h1 id=\"inherit-5\"><a href=\"#inherit-5\" class=\"anchor\"></a>inherit</h1>\n<p>This block provides a function for declaring and inheriting classes.</p>\n<h2 id=\"overview-35\"><a href=\"#overview-35\" class=\"anchor\"></a>Overview</h2>\n<h3 id=\"usage-8\"><a href=\"#usage-8\" class=\"anchor\"></a>Usage</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Use</th>\n<th>Signature</th>\n<th>Return type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#runmode-declare\">Declaring a base class</a></td>\n<td>inherit(<br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Use for creating (declaring) a base class from the object properties.</td>\n</tr>\n<tr>\n<td><a href=\"#runmode-extend\">Creating a derived class</a></td>\n<td>inherit(<br><code>BaseClass {Function}</code>&#124;<code>{Array}</code>, <br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Use for inheriting and redefining the properties and methods of a base class.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"special-fields-of-the-declared-class-4\"><a href=\"#special-fields-of-the-declared-class-4\" class=\"anchor\"></a>Special fields of the declared class</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Data type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#constructor\">__constructor</a></td>\n<td><code>Function</code></td>\n<td>The function that will be called when creating a class instance.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"special-fields-of-the-declared-class-instance-4\"><a href=\"#special-fields-of-the-declared-class-instance-4\" class=\"anchor\"></a>Special fields of the declared class instance</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Data type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#self\">__self</a></td>\n<td><code>*</code></td>\n<td>Allows you to access the class and its instance.</td>\n</tr>\n<tr>\n<td><a href=\"#base\">__base</a></td>\n<td><code>Function</code></td>\n<td>Allows you to use the methods of the base class inside the derived class (super call).</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"public-block-technologies-45\"><a href=\"#public-block-technologies-45\" class=\"anchor\"></a>Public block technologies</h3>\n<p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"description-31\"><a href=\"#description-31\" class=\"anchor\"></a>Description</h2>\n<p>Use the <code>inherit</code> function to:</p>\n<ul>\n<li>Create a class using a declaration.</li>\n<li>Set a constructor method.</li>\n<li>Use mix-ins.</li>\n<li>Call the methods of the base implementation (super call).</li>\n<li>Get access to static properties of a class from its instance.</li>\n</ul>\n<p>This is the main block inheritance mechanism in <code>bem-core</code>.</p>\n<p>The function is polymorphic and, depending on the first argument type, it can be used for:</p>\n<ul>\n<li><code>Object</code> type – declaring the base class.</li>\n<li><code>Function</code> type – deriving a class from the base class.</li>\n</ul>\n<p>The signature of the function&#39;s other arguments depends on how it is run.</p>\n<h3 id=\"usage-9\"><a href=\"#usage-9\" class=\"anchor\"></a>Usage</h3>\n<p><a name=\"runmode-declare\"></a></p>\n<h4 id=\"declaring-a-base-class-2\"><a href=\"#declaring-a-base-class-2\" class=\"anchor\"></a>Declaring a base class</h4>\n<p>This approach allows you to define the base class by passing the function an object with the class properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>props {Object}</code> – An object with its own properties for the base class. Required argument.</li>\n<li>[<code>staticProps {Object}</code>] – An object with static properties of the base class.</li>\n</ul>\n<p><strong>Return value:</strong> <code>Function</code>. The fully-formed class.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar props = {}, // object for the base class properties\n    baseClass = inherit(props); // base class\n\n});\n</code></pre>\n<h5 id=\"base-class-with-static-properties-2\"><a href=\"#base-class-with-static-properties-2\" class=\"anchor\"></a>Base class with static properties</h5>\n<p>Properties of the <code>staticProps</code> object are added as static properties for the class being created.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit(props, {\n    callMe : function() {\n        console.log(&#39;mr.Static&#39;);\n    }\n});\n\nA.callMe(); // mr.Static\n\n});\n</code></pre>\n<h5 id=\"special-fields-of-the-declared-class-5\"><a href=\"#special-fields-of-the-declared-class-5\" class=\"anchor\"></a>Special fields of the declared class</h5>\n<p><a name=\"constructor\"></a></p>\n<h6 id=\"__constructor-field-2\"><a href=\"#__constructor-field-2\" class=\"anchor\"></a><code>__constructor</code> field</h6>\n<p>Type: <code>Function</code>.</p>\n<p>The object with the base class properties can contain the reserved <code>__constructor</code> property, a function that is called automatically when a class instance is created.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n        __constructor : function(property) { // constructor\n            this.property = property;\n        },\n\n        getProperty : function() {\n            return this.property + &#39; of instanceA&#39;;\n        }\n    }),\n    aInst = new A(&#39;Property&#39;);\n\naInst.getProperty(); // Property of instanceA\n\n});\n</code></pre>\n<p><a name=\"runmode-extend\"></a></p>\n<h4 id=\"creating-a-derived-class-2\"><a href=\"#creating-a-derived-class-2\" class=\"anchor\"></a>Creating a derived class</h4>\n<p>This approach allows you to create a derived class from the base class and the objects with the static properties and the custom properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>BaseClass {Function} | {Array}</code> – The base class. Can be an array of mix-in functions. Required argument.</li>\n<li><code>props {Object}</code> – Custom properties (added to the prototype). Required argument.</li>\n<li>[<code>staticProps {Object}</code>] – Static properties.</li>\n</ul>\n<p>If one of the objects contains properties that already exist in the base class, the base class properties are redefined.</p>\n<p><strong>Return value:</strong> <code>Function</code>. Derived class.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getType : function() {\n        return &#39;A&#39;;\n    }\n});\n\n// class derived from A\nvar B = inherit(A, {\n    getType : function() { // redefinition + super call\n        return this.__base() + &#39;B&#39;;\n    }\n});\n\nvar instanceOfB = new B();\n\ninstanceOfB.getType(); // returns &#39;AB&#39;\n\n});\n</code></pre>\n<h5 id=\"creating-a-derived-class-with-mix-ins-2\"><a href=\"#creating-a-derived-class-with-mix-ins-2\" class=\"anchor\"></a>Creating a derived class with mix-ins</h5>\n<p>When declaring a derived class, you can specify an additional set of functions. Their properties will be mixed in to the created class. To do this, the first argument for <code>inherit</code> should specify an array that has the base class as its first element, followed by the functions to mix in.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getA : function() {\n        return &#39;A&#39;;\n    }\n});\n\nvar B = inherit({\n    getB : function() {\n        return &#39;B&#39;;\n    }\n});\n\n// class derived from A and B\nvar C = inherit([A, B], {\n    getAll : function() {\n        return this.getA() + this.getB();\n    }\n});\n\nvar instanceOfC = new C();\n\ninstanceOfC.getAll(); // returns &#39;AB&#39;\n\n});\n</code></pre>\n<h5 id=\"special-fields-of-the-declared-class-instance-5\"><a href=\"#special-fields-of-the-declared-class-instance-5\" class=\"anchor\"></a>Special fields of the declared class instance</h5>\n<p><a name=\"self\"></a></p>\n<h6 id=\"__self-field-2\"><a href=\"#__self-field-2\" class=\"anchor\"></a><code>__self</code> field</h6>\n<p>Type: <code>*</code>.</p>\n<p>Allows you to access the class and its instance.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n        getStaticProperty : function() {\n            return this.__self.staticMethod; // access to static methods\n        }\n    }, {\n        staticProperty : &#39;staticA&#39;,\n\n        staticMethod : function() {\n            return this.staticProperty;\n        }\n    }),\n    aInst = new A();\n\naInst.getStaticProperty(); //staticA\n\n});\n</code></pre>\n<p><a name=\"base\"></a></p>\n<h6 id=\"__base-5\"><a href=\"#__base-5\" class=\"anchor\"></a><code>__base</code></h6>\n<p>Type: <code>Function</code>.</p>\n<p>Allows you to call base class methods inside the derived class (super call). When used in a static method, it will call the static method of the same name in the base class.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;inherit&#39;], function(inherit) {\n\nvar A = inherit({\n    getType : function() {\n        return &#39;A&#39;;\n    }\n}, {\n    staticProperty : &#39;staticA&#39;,\n\n    staticMethod : function() {\n        return this.staticProperty;\n    }\n});\n\n// class derived from A\nvar B = inherit(A, {\n    getType : function() { // redefinition + super call\n        return this.__base() + &#39;B&#39;;\n    }\n}, {\n    staticMethod : function() { // static redefinition + super call\n        return this.__base() + &#39; of staticB&#39;;\n    }\n});\n\nvar instanceOfB = new B();\n\ninstanceOfB.getType(); // returns &#39;AB&#39;\nB.staticMethod(); // returns &#39;staticA of staticB&#39;\n\n});\n</code></pre>\n<p><a name=\"extra-examples\"></a></p>\n<h3 id=\"more-examples-2\"><a href=\"#more-examples-2\" class=\"anchor\"></a>More examples</h3>\n<p>For more examples, see the repository of the <a href=\"https://github.com/dfilatov/inherit\">inherit</a> library.</p>\n","bemjsonDescription":"{\n    \"block\": \"md-root\",\n    \"content\": [\n        {\n            \"level\": 1,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 1\n            },\n            \"content\": \"inherit\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"This block provides a function for declaring and inheriting classes.\"\n        },\n        {\n            \"level\": 2,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 2\n            },\n            \"content\": \"Overview\"\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Usage\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Use\",\n                    \"Signature\",\n                    \"Return type\",\n                    \"Description\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#runmode-declare\\\">\"\n                        },\n                        \"Declaring a base class\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    [\n                        \"inherit(\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"props {Object}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"[staticProps {Object}]\"\n                        },\n                        \")\"\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Use for creating (declaring) a base class from the object properties.\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#runmode-extend\\\">\"\n                        },\n                        \"Creating a derived class\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    [\n                        \"inherit(\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"BaseClass {Function}\"\n                        },\n                        \"|\",\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"{Array}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"props {Object}\"\n                        },\n                        \", \",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<br>\"\n                        },\n                        {\n                            \"block\": \"inline-code\",\n                            \"content\": \"[staticProps {Object}]\"\n                        },\n                        \")\"\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Use for inheriting and redefining the properties and methods of a base class.\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Special fields of the declared class\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Name\",\n                    \"Data type\",\n                    \"Description\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#constructor\\\">\"\n                        },\n                        \"__constructor\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"The function that will be called when creating a class instance.\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Special fields of the declared class instance\"\n        },\n        {\n            \"align\": [\n                null,\n                null,\n                null\n            ],\n            \"block\": \"table\",\n            \"rows\": [\n                [\n                    \"Field\",\n                    \"Data type\",\n                    \"Description\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#self\\\">\"\n                        },\n                        \"__self\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"*\"\n                    },\n                    \"Allows you to access the class and its instance.\"\n                ],\n                [\n                    [\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"<a href=\\\"#base\\\">\"\n                        },\n                        \"__base\",\n                        {\n                            \"block\": \"html\",\n                            \"content\": \"</a>\"\n                        }\n                    ],\n                    {\n                        \"block\": \"inline-code\",\n                        \"content\": \"Function\"\n                    },\n                    \"Allows you to use the methods of the base class inside the derived class (super call).\"\n                ]\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Public block technologies\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"The block is implemented in:\"\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": {\n                \"loose\": false,\n                \"checked\": null,\n                \"block\": \"list-item\",\n                \"content\": {\n                    \"block\": \"paragraph\",\n                    \"content\": {\n                        \"block\": \"inline-code\",\n                        \"content\": \"vanilla.js\"\n                    }\n                }\n            }\n        },\n        {\n            \"level\": 2,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 2\n            },\n            \"content\": \"Description\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Use the \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"inherit\"\n                },\n                \" function to:\"\n            ]\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"Create a class using a declaration.\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"Set a constructor method.\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"Use mix-ins.\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"Call the methods of the base implementation (super call).\"\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \"Get access to static properties of a class from its instance.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"This is the main block inheritance mechanism in \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"bem-core\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"The function is polymorphic and, depending on the first argument type, it can be used for:\"\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"Object\"\n                            },\n                            \" type – declaring the base class.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"Function\"\n                            },\n                            \" type – deriving a class from the base class.\"\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"The signature of the function's other arguments depends on how it is run.\"\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"Usage\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"runmode-declare\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 4,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 4\n            },\n            \"content\": \"Declaring a base class\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"This approach allows you to define the base class by passing the function an object with the class properties.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": {\n                \"block\": \"strong\",\n                \"content\": \"Accepted arguments:\"\n            }\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"props {Object}\"\n                            },\n                            \" – An object with its own properties for the base class. Required argument.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \" – An object with static properties of the base class.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"strong\",\n                    \"content\": \"Return value:\"\n                },\n                \" \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \". The fully-formed class.\"\n            ]\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar props = {}, // object for the base class properties\\n    baseClass = inherit(props); // base class\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Base class with static properties\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Properties of the \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"staticProps\"\n                },\n                \" object are added as static properties for the class being created.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit(props, {\\n    callMe : function() {\\n        console.log('mr.Static');\\n    }\\n});\\n\\nA.callMe(); // mr.Static\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Special fields of the declared class\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"constructor\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": [\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__constructor\"\n                },\n                \" field\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Type: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"The object with the base class properties can contain the reserved \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__constructor\"\n                },\n                \" property, a function that is called automatically when a class instance is created.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n        __constructor : function(property) { // constructor\\n            this.property = property;\\n        },\\n\\n        getProperty : function() {\\n            return this.property + ' of instanceA';\\n        }\\n    }),\\n    aInst = new A('Property');\\n\\naInst.getProperty(); // Property of instanceA\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"runmode-extend\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 4,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 4\n            },\n            \"content\": \"Creating a derived class\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"This approach allows you to create a derived class from the base class and the objects with the static properties and the custom properties.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": {\n                \"block\": \"strong\",\n                \"content\": \"Accepted arguments:\"\n            }\n        },\n        {\n            \"ordered\": false,\n            \"loose\": false,\n            \"block\": \"list\",\n            \"content\": [\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"BaseClass {Function} | {Array}\"\n                            },\n                            \" – The base class. Can be an array of mix-in functions. Required argument.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": [\n                            {\n                                \"block\": \"inline-code\",\n                                \"content\": \"props {Object}\"\n                            },\n                            \" – Custom properties (added to the prototype). Required argument.\"\n                        ]\n                    }\n                },\n                {\n                    \"loose\": false,\n                    \"checked\": null,\n                    \"block\": \"list-item\",\n                    \"content\": {\n                        \"block\": \"paragraph\",\n                        \"content\": \" – Static properties.\"\n                    }\n                }\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"If one of the objects contains properties that already exist in the base class, the base class properties are redefined.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"strong\",\n                    \"content\": \"Return value:\"\n                },\n                \" \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \". Derived class.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getType : function() {\\n        return 'A';\\n    }\\n});\\n\\n// class derived from A\\nvar B = inherit(A, {\\n    getType : function() { // redefinition + super call\\n        return this.__base() + 'B';\\n    }\\n});\\n\\nvar instanceOfB = new B();\\n\\ninstanceOfB.getType(); // returns 'AB'\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Creating a derived class with mix-ins\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"When declaring a derived class, you can specify an additional set of functions. Their properties will be mixed in to the created class. To do this, the first argument for \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"inherit\"\n                },\n                \" should specify an array that has the base class as its first element, followed by the functions to mix in.\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getA : function() {\\n        return 'A';\\n    }\\n});\\n\\nvar B = inherit({\\n    getB : function() {\\n        return 'B';\\n    }\\n});\\n\\n// class derived from A and B\\nvar C = inherit([A, B], {\\n    getAll : function() {\\n        return this.getA() + this.getB();\\n    }\\n});\\n\\nvar instanceOfC = new C();\\n\\ninstanceOfC.getAll(); // returns 'AB'\\n\\n});\\n\"\n        },\n        {\n            \"level\": 5,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 5\n            },\n            \"content\": \"Special fields of the declared class instance\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"self\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": [\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"__self\"\n                },\n                \" field\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Type: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"*\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Allows you to access the class and its instance.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n        getStaticProperty : function() {\\n            return this.__self.staticMethod; // access to static methods\\n        }\\n    }, {\\n        staticProperty : 'staticA',\\n\\n        staticMethod : function() {\\n            return this.staticProperty;\\n        }\\n    }),\\n    aInst = new A();\\n\\naInst.getStaticProperty(); //staticA\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"base\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 6,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 6\n            },\n            \"content\": {\n                \"block\": \"inline-code\",\n                \"content\": \"__base\"\n            }\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"Type: \",\n                {\n                    \"block\": \"inline-code\",\n                    \"content\": \"Function\"\n                },\n                \".\"\n            ]\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Allows you to call base class methods inside the derived class (super call). When used in a static method, it will call the static method of the same name in the base class.\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": \"Example:\"\n        },\n        {\n            \"lang\": \"js\",\n            \"block\": \"code\",\n            \"content\": \"modules.require(['inherit'], function(inherit) {\\n\\nvar A = inherit({\\n    getType : function() {\\n        return 'A';\\n    }\\n}, {\\n    staticProperty : 'staticA',\\n\\n    staticMethod : function() {\\n        return this.staticProperty;\\n    }\\n});\\n\\n// class derived from A\\nvar B = inherit(A, {\\n    getType : function() { // redefinition + super call\\n        return this.__base() + 'B';\\n    }\\n}, {\\n    staticMethod : function() { // static redefinition + super call\\n        return this.__base() + ' of staticB';\\n    }\\n});\\n\\nvar instanceOfB = new B();\\n\\ninstanceOfB.getType(); // returns 'AB'\\nB.staticMethod(); // returns 'staticA of staticB'\\n\\n});\\n\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                {\n                    \"block\": \"html\",\n                    \"content\": \"<a name=\\\"extra-examples\\\">\"\n                },\n                {\n                    \"block\": \"html\",\n                    \"content\": \"</a>\"\n                }\n            ]\n        },\n        {\n            \"level\": 3,\n            \"block\": \"heading\",\n            \"mods\": {\n                \"level\": 3\n            },\n            \"content\": \"More examples\"\n        },\n        {\n            \"block\": \"paragraph\",\n            \"content\": [\n                \"For more examples, see the repository of the \",\n                {\n                    \"href\": \"https://github.com/dfilatov/inherit\",\n                    \"block\": \"link\",\n                    \"content\": \"inherit\"\n                },\n                \" library.\"\n            ]\n        }\n    ]\n}"}}