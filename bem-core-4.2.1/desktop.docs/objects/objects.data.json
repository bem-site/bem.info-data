{"uk":{"name":"objects","examples":[],"description":""},"ru":{"name":"objects","examples":[],"description":"<h1 id=\"objects\"><a href=\"#objects\" class=\"anchor\"></a>objects</h1>\n<p>Блок предоставляет объект, содержащий набор методов для работы с объектами JavaScript.</p>\n<h2 id=\"Обзор-9\"><a href=\"#Обзор-9\" class=\"anchor\"></a>Обзор</h2>\n<h3 id=\"Свойства-и-методы-объекта-10\"><a href=\"#Свойства-и-методы-объекта-10\" class=\"anchor\"></a>Свойства и методы объекта</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Имя</th>\n<th>Тип возвращаемого значения</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#fields-extend\">extend</a>(<br><code>target {Object}</code>, <br><code>source {Object}</code>)</td>\n<td><code>Object</code></td>\n<td>Расширяет объект свойствами другого объекта.</td>\n</tr>\n<tr>\n<td><a href=\"#fields-isEmpty\">isEmpty</a>(<code>obj {Object}</code>)</td>\n<td><code>Boolean</code></td>\n<td>Позволяет выяснить пуст ли переданный объект.</td>\n</tr>\n<tr>\n<td><a href=\"#fields-each\">each</a>(<br><code>obj {Object}</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Итеративно обходит собственные свойства объекта.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Публичные-технологии-блока-12\"><a href=\"#Публичные-технологии-блока-12\" class=\"anchor\"></a>Публичные технологии блока</h3>\n<p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"Описание-8\"><a href=\"#Описание-8\" class=\"anchor\"></a>Описание</h2>\n<p><a name=\"fields\"></a></p>\n<h3 id=\"Свойства-и-методы-объекта-11\"><a href=\"#Свойства-и-методы-объекта-11\" class=\"anchor\"></a>Свойства и методы объекта</h3>\n<p><a name=\"fields-extend\"></a></p>\n<h4 id=\"Метод-extend\"><a href=\"#Метод-extend\" class=\"anchor\"></a>Метод <code>extend</code></h4>\n<p>Расширяет объект свойствами другого объекта. Копируются только собственные свойства, не полученные по цепочке прототипов.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>target {Object}</code> – целевой объект. Обязательный аргумент.</li>\n<li><code>source {Object}</code> – объект, свойства которого добавляются к целевому. Может быть передано несколько объектов. Свойства каждого из них будут добавлены к целевому. Обязательный аргумент.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>Object</code>. Целевой объект с добавленными свойствами.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n\nvar obj1 = { a : 1, b : 2 },\n    obj2 = { b : 3, c : 4 };\n\nconsole.log(objects.extend(obj1, obj2)); // { a : 1, b : 3, c : 4 }\n});\n</code></pre>\n<p><a name=\"fields-isEmpty\"></a></p>\n<h4 id=\"Метод-isempty\"><a href=\"#Метод-isempty\" class=\"anchor\"></a>Метод <code>isEmpty</code></h4>\n<p>Позволяет выяснить пуст ли переданный объект. Другими словами, имеет ли объект собственные свойства.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>obj {Object}</code> – объект для проверки. Обязательный аргумент.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>Boolean</code>. В случае, если объект не имеет собственных свойств – <code>true</code>.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n\nvar obj1 = {},\n    obj2 = { foo : &#39;bar&#39; };\n\nconsole.log(objects.isEmpty(obj1)); // true\nconsole.log(objects.isEmpty(obj2)); // false\n});\n</code></pre>\n<p><a name=\"fields-each\"></a></p>\n<h4 id=\"Метод-each\"><a href=\"#Метод-each\" class=\"anchor\"></a>Метод <code>each</code></h4>\n<p>Служит для итерации по собственным свойствам объекта. Для каждого собственного свойства вызывается функция-обработчик.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>obj {Object}</code> – объект, обход свойств которого производится. Обязательный аргумент.</li>\n<li><code>fn {Function}</code> – функция-обработчик, вызываемая для каждого свойства. Обязательный аргумент.</li>\n<li>[<code>ctx {Object}</code>] – контекст обработчика.</li>\n</ul>\n<p>Не имеет возвращаемого значения.</p>\n<p>Функция-обработчик получает в качестве аргументов значение и ключ свойства объекта, для которого была вызвана.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n    objects.each(\n        { a : 1, b : 2 },\n        function(val, key) {\n            console.log(key, val);\n        });\n    // a 1\n    // b 2\n});\n</code></pre>\n"},"en":{"name":"objects","examples":[],"description":"<h1 id=\"objects-1\"><a href=\"#objects-1\" class=\"anchor\"></a>objects</h1>\n<p>This block provides an object with a set of methods for working with JavaScript objects.</p>\n<h2 id=\"overview-9\"><a href=\"#overview-9\" class=\"anchor\"></a>Overview</h2>\n<h3 id=\"properties-and-methods-of-the-object-5\"><a href=\"#properties-and-methods-of-the-object-5\" class=\"anchor\"></a>Properties and methods of the object</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Return type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#fields-extend\">extend</a>(<br><code>target {Object}</code>, <br><code>source {Object}</code>)</td>\n<td><code>Object</code></td>\n<td>Extends an object with the properties of another object.</td>\n</tr>\n<tr>\n<td><a href=\"#fields-isEmpty\">isEmpty</a>(<code>obj {Object}</code>)</td>\n<td><code>Boolean</code></td>\n<td>Determines whether the passed object is empty.</td>\n</tr>\n<tr>\n<td><a href=\"#fields-each\">each</a>(<br><code>obj {Object}</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Iteratively traverses its own object properties.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"public-block-technologies-12\"><a href=\"#public-block-technologies-12\" class=\"anchor\"></a>Public block technologies</h3>\n<p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"description-8\"><a href=\"#description-8\" class=\"anchor\"></a>Description</h2>\n<p><a name=\"fields\"></a></p>\n<h3 id=\"properties-and-methods-of-the-object-6\"><a href=\"#properties-and-methods-of-the-object-6\" class=\"anchor\"></a>Properties and methods of the object</h3>\n<p><a name=\"fields-extend\"></a></p>\n<h4 id=\"extend-method\"><a href=\"#extend-method\" class=\"anchor\"></a><code>extend</code> method</h4>\n<p>Extends an object with the properties of another object. It only copies its own properties that weren&#39;t taken from the prototype chain.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>target {Object}</code> – Target object. Required argument.</li>\n<li><code>source {Object}</code> – The object whose properties are added to the target object. Multiple objects can be passed. The properties of each of them will be added to the target object. Required argument.</li>\n</ul>\n<p><strong>Return value:</strong> <code>Event</code>. The target object with the added properties.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n\nvar obj1 = { a : 1, b : 2 },\n    obj2 = { b : 3, c : 4 };\n\nconsole.log(objects.extend(obj1, obj2)); // { a : 1, b : 3, c : 4 }\n});\n</code></pre>\n<p><a name=\"fields-isEmpty\"></a></p>\n<h4 id=\"isempty-method\"><a href=\"#isempty-method\" class=\"anchor\"></a><code>isEmpty</code> method</h4>\n<p>Determines whether the passed object is empty. In other words, whether the object has its own properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>obj {Object}</code> – The object to check. Required argument.</li>\n</ul>\n<p><strong>Return value:</strong> <code>Boolean</code>. If the object doesn&#39;t have its own properties, <code>true</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n\nvar obj1 = {},\n    obj2 = { foo : &#39;bar&#39; };\n\nconsole.log(objects.isEmpty(obj1)); // true\nconsole.log(objects.isEmpty(obj2)); // false\n});\n</code></pre>\n<p><a name=\"fields-each\"></a></p>\n<h4 id=\"each-method\"><a href=\"#each-method\" class=\"anchor\"></a><code>each</code> method</h4>\n<p>Used for iterating through an object&#39;s properties. The handler function is invoked for each of the object&#39;s own properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>obj {Object}</code> – The object whose properties are being traversed. Required argument.</li>\n<li><code>fn {Function}</code> – The handler function to call for each property. Required argument.</li>\n<li>[<code>ctx {Object}</code>] – The handler context.</li>\n</ul>\n<p>No return value.</p>\n<p>The handler function receives arguments with the value and key of the object property that it was invoked for.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n    objects.each(\n        { a : 1, b : 2 },\n        function(val, key) {\n            console.log(key, val);\n        });\n    // a 1\n    // b 2\n});\n</code></pre>\n"}}