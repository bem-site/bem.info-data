{"uk":{"name":"identify","examples":[],"description":""},"ru":{"name":"identify","examples":[],"description":"<h1 id=\"identify\"><a href=\"#identify\" class=\"anchor\"></a>identify</h1>\n<p>Блок предоставляет функцию для работы с уникальными идентификаторами, которая позволяет:</p>\n<ul>\n<li>создавать идентификаторы объектов;</li>\n<li>проверять у объектов наличие идентификатора;</li>\n<li>создавать уникальную строку-идентификатор.</li>\n</ul>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li>[<code>obj {Object}</code>] – идентифицируемый объект.</li>\n<li>[<code>onlyGet {Boolean}</code>] – флаг для проверки наличия у объекта идентификатора. Если <code>true</code>, функция будет возвращать строку с идентификатором только если объект был заранее идентифицирован. По умолчанию <code>false</code>.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>String</code>. Строка с идентификатором, присвоенным объекту. При последующих вызовах всегда будет возвращаться один и тот же идентификатор.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(identify) {\n    var a = {},\n        b = {},\n        identA = identify(a);\n\n    console.log(identA === identify(a)); // true\n    console.log(identA === identify(b)); // false\n});\n</code></pre>\n<p>При вызове без аргументов, функция будет каждый раз возвращать строку с уникальным идентификатором.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(identify) {\n    var a = identify(),\n        b = identify();\n\n    console.log(a === b); // false\n});\n</code></pre>\n<h2 id=\"Публичные-технологии-блока-5\"><a href=\"#Публичные-технологии-блока-5\" class=\"anchor\"></a>Публичные технологии блока</h2>\n<p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n"},"en":{"name":"identify","examples":[],"description":"<h1 id=\"identify-1\"><a href=\"#identify-1\" class=\"anchor\"></a>identify</h1>\n<p>This block provides a function for working with unique identifiers. It allows you to:</p>\n<ul>\n<li>Create object identifiers.</li>\n<li>Check whether objects have an identifier.</li>\n<li>Create a unique identifier string.</li>\n</ul>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li>[<code>obj {Object}</code>] – The object to identify.</li>\n<li>[<code>onlyGet {Boolean}</code>] – Flag for checking whether the object has an identifier. If <code>true</code>, the function returns a string with the identifier if the object was previously assigned an identifier. By default, <code>false</code>.</li>\n</ul>\n<p><strong>Return value:</strong> <code>String</code>. A string with the identifier assigned to the object. Subsequent calls will always return the same identifier.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(identify) {\n    var a = {},\n        b = {},\n        identA = identify(a);\n\n    console.log(identA === identify(a)); //true\n    console.log(identA === identify(b)); //false\n});\n</code></pre>\n<p>When called without arguments, the function returns a string with a unique identifier every time.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(identify) {\n    var a = identify(),\n        b = identify();\n\n    console.log(a === b); //false\n});\n</code></pre>\n<h2 id=\"public-block-technologies-5\"><a href=\"#public-block-technologies-5\" class=\"anchor\"></a>Public block technologies</h2>\n<p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n"}}