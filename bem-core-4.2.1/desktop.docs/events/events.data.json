{"uk":{"name":"events","examples":[],"description":""},"ru":{"name":"events","examples":[],"description":"<h1 id=\"events\"><a href=\"#events\" class=\"anchor\"></a>events</h1>\n<p>Блок предоставляет набор JS-классов, реализующий механизмы работы с событиями.</p>\n<h2 id=\"Обзор-2\"><a href=\"#Обзор-2\" class=\"anchor\"></a>Обзор</h2>\n<h3 id=\"Классы-предоставляемые-блоком\"><a href=\"#Классы-предоставляемые-блоком\" class=\"anchor\"></a>Классы, предоставляемые блоком</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Класс</th>\n<th>Конструктор</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td>Event(<br><code>type {String}</code>, <br><code>target {Object}</code>)</td>\n<td>Служит для создания объекта события, изменения и проверки его состояний.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td>-</td>\n<td>Служит для генерации событий и подписки на них.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Свойства-и-методы-объекта-класса\"><a href=\"#Свойства-и-методы-объекта-класса\" class=\"anchor\"></a>Свойства и методы объекта класса</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Класс</th>\n<th>Имя</th>\n<th>Тип или возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td><a href=\"#fields-type\">type</a></td>\n<td><code>String</code></td>\n<td>Тип события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-result\">result</a></td>\n<td><code>*</code></td>\n<td>Результат, возвращенный последним обработчиком события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-target\">target</a></td>\n<td><code>Object</code></td>\n<td>Объект на котором возникло событие.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-data\">data</a></td>\n<td><code>*</code></td>\n<td>Данные, передаваемые как аргумент обработчику.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-preventDefault\">preventDefault</a>()</td>\n<td>-</td>\n<td>Позволяет предотвратить выполнение стандартного действия предусмотренного для события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isDefaultPrevented\">isDefaultPrevented</a>()</td>\n<td><code>Boolean</code></td>\n<td>Проверяет, было ли предотвращено выполнение стандартного действия, предусмотренного для события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-stopPropagation\">stopPropagation</a>()</td>\n<td>-</td>\n<td>Позволяет остановить всплывание события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isPropagationStopped\">isPropagationStopped</a>()</td>\n<td><code>Boolean</code></td>\n<td>Проверяет, было ли остановлено всплывание события.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td><a href=\"#fields-on\">on</a>(<br><code>type {String}</code>, <br><code>[data {Object}]</code>, <br><code>fn {Function}</code>, <br><code>[ {Object} ctx]</code>)</td>\n<td>-</td>\n<td>Служит для подписки на событие определенного типа.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-once\">once</a>(<br><code>type {String}</code>, <br><code>[data {Object}]</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Служит для подписки на событие определенного типа. Обработчик выполняется единожды.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-un\">un</a>(<br><code>type {String}</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Служит для удаления подписки на событие определенного типа.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-emit\">emit</a>(<br><code>type {String</code>&#124;<code>events:Event}</code>, <br><code>[data {Object}]</code>)</td>\n<td>-</td>\n<td>Служит для генерации события.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Элементы-блока\"><a href=\"#Элементы-блока\" class=\"anchor\"></a>Элементы блока</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Способы использования</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-channels\">channels</a></td>\n<td><code>JS</code></td>\n<td>Предназначен для работы с именованными каналами событий.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Функции-предоставляемые-элементами-блока\"><a href=\"#Функции-предоставляемые-элементами-блока\" class=\"anchor\"></a>Функции предоставляемые элементами блока</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Функция</th>\n<th>Тип возвращаемого значения</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-channels\">channels</a></td>\n<td>channels(<br><code>[id {String}]</code>, <br><code>[drop {Boolean}]</code>)</td>\n<td><code>Object</code>&#124;<code>undefined</code></td>\n<td>Создает или удаляет именованный канал событий.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"Публичные-технологии-блока-3\"><a href=\"#Публичные-технологии-блока-3\" class=\"anchor\"></a>Публичные технологии блока</h3>\n<p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"Описание-2\"><a href=\"#Описание-2\" class=\"anchor\"></a>Описание</h2>\n<p><a name=\"class-Event\"></a></p>\n<h3 id=\"Класс-event\"><a href=\"#Класс-event\" class=\"anchor\"></a>Класс <code>Event</code></h3>\n<p>С помощью класса можно инстанцировать объект события, указав его тип и источник. Для этого нужно воспользоваться функцией-конструктором <code>Event</code>.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>type {String}</code> – тип события. Обязательный аргумент.</li>\n<li><code>target {Object}</code> – объект (источник) на котором событие возникло. Обязательный аргумент.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>Event</code>. Объект события.</p>\n<p><a name=\"fields-Event\"></a></p>\n<h4 id=\"Свойства-и-методы-объекта-класса-1\"><a href=\"#Свойства-и-методы-объекта-класса-1\" class=\"anchor\"></a>Свойства и методы объекта класса</h4>\n<p><a name=\"fields-type\"></a></p>\n<h5 id=\"Свойство-type\"><a href=\"#Свойство-type\" class=\"anchor\"></a>Свойство <code>type</code></h5>\n<p>Тип: <code>String</code>.</p>\n<p>Тип события.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myevent = new events.Event(&#39;myevent&#39;, this);\n    console.log(myevent.type); // &#39;myevent&#39;\n\n});\n</code></pre>\n<p><a name=\"fields-type\"></a></p>\n<h5 id=\"Свойство-target\"><a href=\"#Свойство-target\" class=\"anchor\"></a>Свойство <code>target</code></h5>\n<p>Тип: <code>Object</code>.</p>\n<p>Объект, на котором возникло событие.</p>\n<p><a name=\"fields-result\"></a></p>\n<h5 id=\"Свойство-result\"><a href=\"#Свойство-result\" class=\"anchor\"></a>Свойство <code>result</code></h5>\n<p>Тип: <code>*</code>.</p>\n<p>Содержит данные, возвращаемые последней функцией-обработчиком события.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n    myEmitter.on(&#39;myevent&#39;, function() { return &#39;hi-hi-hi&#39;; });\n\n    var myEvent = new events.Event(&#39;myevent&#39;);\n    myEmitter.emit(myEvent)\n\n    console.log(myEvent.result);    // &#39;hi-hi-hi&#39;\n});\n</code></pre>\n<p><a name=\"fields-data\"></a></p>\n<h5 id=\"Свойство-data\"><a href=\"#Свойство-data\" class=\"anchor\"></a>Свойство <code>data</code></h5>\n<p>Тип: <code>*</code>.</p>\n<p>Содержит данные, передаваемые функции-обработчику события в качестве аргумента.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n    myEmitter.on(&#39;myevent&#39;, &#39;my-data&#39;, function(e) { console.log(e.data); });\n\n    myEmitter.emit(&#39;myevent&#39;); // my-data\n});\n</code></pre>\n<p><a name=\"fields-preventDefault\"></a></p>\n<h5 id=\"Метод-preventdefault\"><a href=\"#Метод-preventdefault\" class=\"anchor\"></a>Метод <code>preventDefault</code></h5>\n<p>Позволяет предотвратить выполнение стандартного действия предусмотренного для события.</p>\n<p>Не принимает аргументов.</p>\n<p>Не имеет возвращаемого значения.</p>\n<p><a name=\"fields-isDefaultPrevented\"></a></p>\n<h5 id=\"Метод-isdefaultprevented\"><a href=\"#Метод-isdefaultprevented\" class=\"anchor\"></a>Метод <code>isDefaultPrevented</code></h5>\n<p>Позволяет проверить было ли предотвращено выполнение стандартного действия для события.</p>\n<p>Не принимает аргументов.</p>\n<p><strong>Возвращаемое значение:</strong> <code>Boolean</code>. В случае, если выполнение стандартного действия было предотвращено – <code>true</code>.</p>\n<p><a name=\"fields-stopPropagation\"></a></p>\n<h5 id=\"Метод-stoppropagation\"><a href=\"#Метод-stoppropagation\" class=\"anchor\"></a>Метод <code>stopPropagation</code></h5>\n<p>Позволяет остановить всплывание события.</p>\n<p>Не принимает аргументов.</p>\n<p>Не имеет возвращаемого значения.</p>\n<p><a name=\"fields-isPropagationStopped\"></a></p>\n<h5 id=\"Метод-ispropagationstopped\"><a href=\"#Метод-ispropagationstopped\" class=\"anchor\"></a>Метод <code>isPropagationStopped</code></h5>\n<p>Позволяет проверить, было ли остановлено всплывание события.</p>\n<p>Не принимает аргументов.</p>\n<p><strong>Возвращаемое значение:</strong> <code>Boolean</code>. В случае, если всплывание события было остановлено – <code>true</code>.</p>\n<p><a name=\"class-Emitter\"></a></p>\n<h3 id=\"Класс-emitter\"><a href=\"#Класс-emitter\" class=\"anchor\"></a>Класс <code>Emitter</code></h3>\n<p>Класс позволяет инстанцировать объекты, с помощью которых можно генерировать события и осуществлять подписку на них.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n});\n</code></pre>\n<p><a name=\"fields-Event\"></a></p>\n<h4 id=\"Свойства-и-методы-объекта-класса-2\"><a href=\"#Свойства-и-методы-объекта-класса-2\" class=\"anchor\"></a>Свойства и методы объекта класса</h4>\n<p><a name=\"fields-on\"></a></p>\n<h5 id=\"Метод-on\"><a href=\"#Метод-on\" class=\"anchor\"></a>Метод <code>on</code></h5>\n<p>Служит для подписки на событие определенного типа.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>type {String}</code> – тип события, на которое производится подписка. Обязательный аргумент.</li>\n<li>[<code>data {Object}</code>] – дополнительные данные, доступные обработчику как значение поля <code>e.data</code> объекта события.</li>\n<li><code>fn {Function}</code> – функция-обработчик, вызываемая для события. Обязательный аргумент.</li>\n<li>[<code>ctx {Object}</code>] – контекст функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function() { console.log(&#39;foo&#39;); });\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n});\n</code></pre>\n<p>Кроме того, значением аргумента <code>type</code> могут быть:</p>\n<ul>\n<li>несколько типов событий, перечисленных через пробел – чтобы установить для них общую функцию-обработчик;</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent1 myevent2&#39;, function(e) { console.log(e.type) });\n\n    myEmitter.emit(&#39;myevent1&#39;); // &#39;myevent1&#39;\n    myEmitter.emit(&#39;myevent2&#39;); // &#39;myevent2&#39;\n});\n</code></pre>\n<ul>\n<li>хеш вида <code>{ &#39;событие-1&#39; : обработчик-1, ... , &#39;событие-n&#39; : обработчик-n }</code> – чтобы установить сразу несколько обработчиков для разных типов событий;</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on({\n        myevent1 : function(e) { console.log(e.type) },\n        myevent2 : function(e) { console.log(e.type) }\n    });  \n\n    myEmitter.emit(&#39;myevent1&#39;); // &#39;myevent1&#39;\n    myEmitter.emit(&#39;myevent2&#39;); // &#39;myevent2&#39;\n});\n</code></pre>\n<p>Сказанное выше верно и для методов <code>once</code> и <code>un</code>.</p>\n<p><a name=\"fields-once\"></a></p>\n<h5 id=\"Метод-once\"><a href=\"#Метод-once\" class=\"anchor\"></a>Метод <code>once</code></h5>\n<p>Идентичен методу <code>on</code>, но выполняется единожды – после первого события подписка удаляется.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>type {String}</code> – тип события, на которое производится подписка. Обязательный аргумент.</li>\n<li>[<code>data {Object}</code>] – дополнительные данные, доступные как значение поля <code>e.data</code> объекта события.</li>\n<li><code>fn {Function}</code> – функция-обработчик, вызываемая для события. Обязательный аргумент.</li>\n<li>[<code>ctx {Object}</code>] – контекст функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function() { console.log(&#39;foo&#39;) });\n\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n    myEmitter.emit(&#39;myevent&#39;); // обработчик не вызывается\n});\n</code></pre>\n<p><a name=\"fields-un\"></a></p>\n<h5 id=\"Метод-un\"><a href=\"#Метод-un\" class=\"anchor\"></a>Метод <code>un</code></h5>\n<p>Служит для удаления установленной ранее подписки на событие определенного типа.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>type {String}</code> – тип события, подписка на которое удаляется. Обязательный аргумент.</li>\n<li>[<code>fn {Function}</code>] – удаляемый обработчик.</li>\n<li>[<code>ctx {Object}</code>] – контекст обработчика.</li>\n</ul>\n<p>Метод возвращает ссылку на объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter(),\n        shout = function() { console.log(&#39;foo&#39;) };\n\n    myEmitter.on(&#39;myevent&#39;, shout);\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n\n    myEmitter.un(&#39;myevent&#39;, shout);\n    myEmitter.emit(&#39;myevent&#39;); // обработчик не вызывается\n});\n</code></pre>\n<p><a name=\"fields-emit\"></a></p>\n<h5 id=\"Метод-emit\"><a href=\"#Метод-emit\" class=\"anchor\"></a>Метод <code>emit</code></h5>\n<p>Служит для генерации события.</p>\n<p>Метод вызывает все функции-обработчики, заданные для события.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>type {String|events:Event}</code> – генерируемое событие в виде строки или готового объекта события. Обязательный аргумент.</li>\n<li>[<code>data {Object}</code>] – дополнительные данные, доступные как второй аргумент функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function(e, data) { console.log(data) });\n    myEmitter.emit(&#39;myevent&#39;, &#39;ololo&#39;);  // &#39;ololo&#39;\n});\n</code></pre>\n<h4 id=\"Статические-методы-класса\"><a href=\"#Статические-методы-класса\" class=\"anchor\"></a>Статические методы класса</h4>\n<p>Набор и сигнатуры статических методов идентичны набору и сигнатурам методов объекта, инстанцируемого классом.</p>\n\n<p><a name=\"elems-channels\"></a></p>\n<h1 id=\"Элемент-channels-блока-events\"><a href=\"#Элемент-channels-блока-events\" class=\"anchor\"></a>Элемент <code>channels</code> блока <code>events</code></h1>\n<p>Элемент <code>channels</code> блока <code>events</code> предназначен для работы с именованными каналами событий. Именные каналы позволяют организовать работу с событиями, используя шаблон проектирования «наблюдатель» (также известный как Publisher-subscriber).</p>\n<p>Элемент реализует функцию, позволяющую:</p>\n<ul>\n<li>получить ссылку на именной канал по <code>id</code>;</li>\n<li>получить ссылку на стандартный канал;</li>\n<li>удалить канал – стандартный или по <code>id</code>.</li>\n</ul>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li>[<code>id {String}</code>] – Идентификатор канала. Если не задан будет использоваться канал по умолчанию (<code>&#39;default&#39;</code>).</li>\n<li>[<code>drop {Boolean}</code>] – Логический флаг, указывающий (в значении <code>true</code>) на необходимость удалить канал. По умолчанию <code>false</code>.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong></p>\n<ul>\n<li><code>Object</code>. Объект «класса» <code>Emitter</code> – именной канал.</li>\n<li><code>undefined</code>. В случае если функция была вызвана с параметром <code>drop</code> в значении <code>true</code>.</li>\n</ul>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events__channels&#39;], function(channels) {\n\nvar myChannel = channels(&#39;my-channel&#39;);\nmyChannel.on(&#39;test&#39;, function(e, data) { console.log(data.foo) });\n\nmyChannel.emit(&#39;test&#39;, { foo : &#39;bar&#39; }); // &#39;bar&#39;\n\n});\n</code></pre>\n"},"en":{"name":"events","examples":[],"description":"<h1 id=\"events-1\"><a href=\"#events-1\" class=\"anchor\"></a>events</h1>\n<p>This block provides a set of JS classes for working with events.</p>\n<h2 id=\"overview-2\"><a href=\"#overview-2\" class=\"anchor\"></a>Overview</h2>\n<h3 id=\"classes-provided-by-the-block\"><a href=\"#classes-provided-by-the-block\" class=\"anchor\"></a>Classes provided by the block</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Constructor</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td>Event(<br><code>type {String}</code>, <br><code>target {Object}</code>)</td>\n<td>Creates the event object and changes and checks its states.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td>-</td>\n<td>Generates events and subscriptions to them.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"properties-and-methods-of-the-class-object\"><a href=\"#properties-and-methods-of-the-class-object\" class=\"anchor\"></a>Properties and methods of the class object</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Name</th>\n<th>Type or return value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td><a href=\"#fields-type\">type</a></td>\n<td><code>String</code></td>\n<td>Type of event.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-result\">result</a></td>\n<td><code>*</code></td>\n<td>The result returned by the event&#39;s last handler.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-target\">target</a></td>\n<td><code>Object</code></td>\n<td>The object where the event occurred.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-data\">data</a></td>\n<td><code>*</code></td>\n<td>Data to pass to the handler as an argument.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-preventDefault\">preventDefault</a>()</td>\n<td>-</td>\n<td>Allows you to prevent execution of the default action for the event.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isDefaultPrevented\">isDefaultPrevented</a>()</td>\n<td><code>Boolean</code></td>\n<td>Checks whether the default action for the event was prevented from being executed.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-stopPropagation\">stopPropagation</a>()</td>\n<td>-</td>\n<td>Allows you to stop event propagation.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isPropagationStopped\">isPropagationStopped</a>()</td>\n<td><code>Boolean</code></td>\n<td>Checks whether event propagation was stopped.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td><a href=\"#fields-on\">on</a>(<br><code>type {String}</code>, <br><code>[data {Object}]</code>, <br><code>fn {Function}</code>, <br><code>[ {Object} ctx]</code>)</td>\n<td>-</td>\n<td>Subscribes to a specific type of event.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-once\">once</a>(<br><code>type {String}</code>, <br><code>[data {Object}]</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Subscribes to a specific type of event. The handler executes only once.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-un\">un</a>(<br><code>type {String}</code>, <br><code>fn {Function}</code>, <br><code>[ctx {Object}]</code>)</td>\n<td>-</td>\n<td>Unsubscribes to a specific type of event.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-emit\">emit</a>(<br><code>type {String</code>&#124;<code>events:Event}</code>, <br><code>[data {Object}]</code>)</td>\n<td>-</td>\n<td>Generates an event.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"elements-of-the-block\"><a href=\"#elements-of-the-block\" class=\"anchor\"></a>Elements of the block</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-channels\">channels</a></td>\n<td><code>JS</code></td>\n<td>Used for working with named event channels.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"functions-provided-by-block-elements\"><a href=\"#functions-provided-by-block-elements\" class=\"anchor\"></a>Functions provided by block elements</h3>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Function</th>\n<th>Return type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-channels\">channels</a></td>\n<td>channels(<br><code>[id {String}]</code>, <br><code>[drop {Boolean}]</code>)</td>\n<td><code>Object</code>&#124;<code>undefined</code></td>\n<td>Creates or deletes a named event channel.</td>\n</tr>\n</tbody>\n</table>\n</div><h3 id=\"public-block-technologies-3\"><a href=\"#public-block-technologies-3\" class=\"anchor\"></a>Public block technologies</h3>\n<p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 id=\"description-2\"><a href=\"#description-2\" class=\"anchor\"></a>Description</h2>\n<p><a name=\"class-Event\"></a></p>\n<h3 id=\"event-class\"><a href=\"#event-class\" class=\"anchor\"></a><code>Event</code> class</h3>\n<p>You can use this class to instantiate an event object by indicating its type and source. To do this, use the <code>Event</code> constructor function.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>type {String}</code> – Type of event. Required argument.</li>\n<li><code>target {Object}</code> – Object (source) where the event occurred. Required argument.</li>\n</ul>\n<p><strong>Return value:</strong> <code>Event</code>. The event object.</p>\n<p><a name=\"fields-Event\"></a></p>\n<h4 id=\"properties-and-methods-of-the-class-object-1\"><a href=\"#properties-and-methods-of-the-class-object-1\" class=\"anchor\"></a>Properties and methods of the class object</h4>\n<p><a name=\"fields-type\"></a></p>\n<h5 id=\"type-property\"><a href=\"#type-property\" class=\"anchor\"></a><code>type</code> property</h5>\n<p>Type: <code>String</code>.</p>\n<p>Type of event.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myevent = new events.Event(&#39;myevent&#39;, this);\n    console.log(myevent.type); // &#39;myevent&#39;\n\n});\n</code></pre>\n<p><a name=\"fields-type\"></a></p>\n<h5 id=\"target-property\"><a href=\"#target-property\" class=\"anchor\"></a><code>target</code> property</h5>\n<p>Type: <code>Object</code>.</p>\n<p>The object where the event occurred.</p>\n<p><a name=\"fields-result\"></a></p>\n<h5 id=\"result-property\"><a href=\"#result-property\" class=\"anchor\"></a><code>result</code> property</h5>\n<p>Type: <code>*</code>.</p>\n<p>Contains the data returned by the event&#39;s last handler function.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n    myEmitter.on(&#39;myevent&#39;, function() { return &#39;hi-hi-hi&#39;; });\n\n    var myEvent = new events.Event(&#39;myevent&#39;);\n    myEmitter.emit(myEvent)\n\n    console.log(myEvent.result);    // &#39;hi-hi-hi&#39;\n});\n</code></pre>\n<p><a name=\"fields-data\"></a></p>\n<h5 id=\"data-property\"><a href=\"#data-property\" class=\"anchor\"></a><code>data</code> property</h5>\n<p>Type: <code>*</code>.</p>\n<p>Contains the data passed to the event&#39;s handler function as an argument.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n    myEmitter.on(&#39;myevent&#39;, &#39;my-data&#39;, function(e) { console.log(e.data); });\n\n    myEmitter.emit(&#39;myevent&#39;); // my-data\n});\n</code></pre>\n<p><a name=\"fields-preventDefault\"></a></p>\n<h5 id=\"preventdefault-method\"><a href=\"#preventdefault-method\" class=\"anchor\"></a><code>preventDefault</code> method</h5>\n<p>Allows you to prevent execution of the default action for the event.</p>\n<p>Doesn&#39;t accept arguments.</p>\n<p>No return value.</p>\n<p><a name=\"fields-isDefaultPrevented\"></a></p>\n<h5 id=\"isdefaultprevented-method\"><a href=\"#isdefaultprevented-method\" class=\"anchor\"></a><code>isDefaultPrevented</code> method</h5>\n<p>Allows you to check whether the default action for the event was prevented from being executed.</p>\n<p>Doesn&#39;t accept arguments.</p>\n<p><strong>Return value:</strong> <code>Boolean</code>. If the default action for the event was prevented from being executed, it is <code>true</code>.</p>\n<p><a name=\"fields-stopPropagation\"></a></p>\n<h5 id=\"stoppropagation-method\"><a href=\"#stoppropagation-method\" class=\"anchor\"></a><code>stopPropagation</code> method</h5>\n<p>Allows you to stop event propagation.</p>\n<p>Doesn&#39;t accept arguments.</p>\n<p>No return value.</p>\n<p><a name=\"fields-isPropagationStopped\"></a></p>\n<h5 id=\"ispropagationstopped-method\"><a href=\"#ispropagationstopped-method\" class=\"anchor\"></a><code>isPropagationStopped</code> method</h5>\n<p>Allows you to check whether event propagation was stopped.</p>\n<p>Doesn&#39;t accept arguments.</p>\n<p><strong>Return value:</strong> <code>Boolean</code>. If event propagation was stopped, it is <code>true</code>.</p>\n<p><a name=\"class-Emitter\"></a></p>\n<h3 id=\"emitter-class\"><a href=\"#emitter-class\" class=\"anchor\"></a><code>Emitter</code> class</h3>\n<p>This class instantiates objects that you can use for generating events and subscribing to them.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n});\n</code></pre>\n<p><a name=\"fields-Event\"></a></p>\n<h4 id=\"properties-and-methods-of-the-class-object-2\"><a href=\"#properties-and-methods-of-the-class-object-2\" class=\"anchor\"></a>Properties and methods of the class object</h4>\n<p><a name=\"fields-on\"></a></p>\n<h5 id=\"on-method\"><a href=\"#on-method\" class=\"anchor\"></a><code>on</code> method</h5>\n<p>Subscribes to a specific type of event.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>type {String}</code> – The type of event being subscribed to. Required argument.</li>\n<li>[<code>data {Object}</code>] – Additional data available to the handler as the value of the <code>e.data</code> field in the event object.</li>\n<li><code>fn {Function}</code> – The handler function to call for the event. Required argument.</li>\n<li>[<code>ctx {Object}</code>] – Context for the handler function.</li>\n</ul>\n<p>Returns the <code>this</code> object.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function() { console.log(&#39;foo&#39;); });\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n});\n</code></pre>\n<p>In addition, the value of the <code>type</code> argument may be:</p>\n<ul>\n<li>Multiple event types separated by spaces, in order to set a single handler function for all of them.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent1 myevent2&#39;, function(e) { console.log(e.type) });\n\n    myEmitter.emit(&#39;myevent1&#39;); // &#39;myevent1&#39;\n    myEmitter.emit(&#39;myevent2&#39;); // &#39;myevent2&#39;\n});\n</code></pre>\n<ul>\n<li>A hash of <code>{ &#39;event-1&#39; : handler-1, ... , &#39;event-n&#39; : handler-n }</code>, in order to set multiple handlers for different event types.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on({\n        myevent1 : function(e) { console.log(e.type) },\n        myevent2 : function(e) { console.log(e.type) }\n    });  \n\n    myEmitter.emit(&#39;myevent1&#39;); // &#39;myevent1&#39;\n    myEmitter.emit(&#39;myevent2&#39;); // &#39;myevent2&#39;\n});\n</code></pre>\n<p>The same is true for the <code>once</code> and <code>un</code> methods.</p>\n<p><a name=\"fields-once\"></a></p>\n<h5 id=\"once-method\"><a href=\"#once-method\" class=\"anchor\"></a><code>once</code> method</h5>\n<p>Identical to the <code>on</code> method, but it only executes once. After the first event, the subscription is removed.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>type {String}</code> – The type of event being subscribed to. Required argument.</li>\n<li>[<code>data {Object}</code>] – Additional data available as the value of the <code>e.data</code> field in the event object.</li>\n<li><code>fn {Function}</code> – The handler function to call for the event. Required argument.</li>\n<li>[<code>ctx {Object}</code>] – Context for the handler function.</li>\n</ul>\n<p>Returns the <code>this</code> object.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function() { console.log(&#39;foo&#39;) });\n\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n    myEmitter.emit(&#39;myevent&#39;); //handler isn&#39;t called\n});\n</code></pre>\n<p><a name=\"fields-un\"></a></p>\n<h5 id=\"un-method\"><a href=\"#un-method\" class=\"anchor\"></a><code>un</code> method</h5>\n<p>Removes a previously set subscription to a specific type of event.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>type {String}</code> – The type of event being unsubscribed from. Required argument.</li>\n<li>[<code>fn {Function}</code>] – The handler to delete.</li>\n<li>[<code>ctx {Object}</code>] – The handler context.</li>\n</ul>\n<p>The method returns a reference to the <code>this</code> object.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter(),\n        shout = function() { console.log(&#39;foo&#39;) };\n\n    myEmitter.on(&#39;myevent&#39;, shout);\n    myEmitter.emit(&#39;myevent&#39;); // &#39;foo&#39;\n\n    myEmitter.un(&#39;myevent&#39;, shout);\n    myEmitter.emit(&#39;myevent&#39;); //handler isn&#39;t called\n});\n</code></pre>\n<p><a name=\"fields-emit\"></a></p>\n<h5 id=\"emit-method\"><a href=\"#emit-method\" class=\"anchor\"></a><code>emit</code> method</h5>\n<p>Generates an event.</p>\n<p>This method calls all the handler functions set for the event.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>type {String|events:Event}</code> – The event to generate, in the form of a string or a prepared event object. Required argument.</li>\n<li>[<code>data {Object}</code>] – Additional data available as the second argument of the handler function.</li>\n</ul>\n<p>Returns the <code>this</code> object.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events&#39;], function(events) {\n\n    var myEmitter = new events.Emitter();\n\n    myEmitter.on(&#39;myevent&#39;, function(e, data) { console.log(data) });\n    myEmitter.emit(&#39;myevent&#39;, &#39;ololo&#39;);  // &#39;ololo&#39;\n});\n</code></pre>\n<h4 id=\"static-methods-of-the-class\"><a href=\"#static-methods-of-the-class\" class=\"anchor\"></a>Static methods of the class</h4>\n<p>The set of static methods and their signatures is exactly the same as for the methods of the object being instantiated by the class.</p>\n\n<p><a name=\"elems-channels\"></a></p>\n<h1 id=\"channels-element-in-the-events-block\"><a href=\"#channels-element-in-the-events-block\" class=\"anchor\"></a><code>channels</code> element in the <code>events</code> block</h1>\n<p>Use the <code>channels</code> element in the <code>events</code> block for working with named event channels. Named channels allow you to work with events using the observer pattern (also known as the publish-subscribe pattern).</p>\n<p>This element implements a function to:</p>\n<ul>\n<li>Get a reference to a named channel by its <code>id</code>.</li>\n<li>Get a reference to a standard channel.</li>\n<li>Remove a standard channel or a named channel with an <code>id</code>.</li>\n</ul>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li>[<code>id {String}</code>] – Channel ID. If omitted, the default channel is used (<code>&#39;default&#39;</code>).</li>\n<li>[<code>drop {Boolean}</code>] – A boolean flag to remove the channel (when <code>true</code>). By default, <code>false</code>.</li>\n</ul>\n<p><strong>Returned value:</strong></p>\n<ul>\n<li><code>Object</code>. Object of the <code>Emitter</code> &quot;class&quot; – a named channel.</li>\n<li><code>undefined</code>. If the function was called with the <code>drop</code> parameter set to <code>true</code>.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;events__channels&#39;], function(channels) {\n\nvar myChannel = channels(&#39;my-channel&#39;);\nmyChannel.on(&#39;test&#39;, function(e, data) { console.log(data.foo) });\n\nmyChannel.emit(&#39;test&#39;, { foo : &#39;bar&#39; }); // &#39;bar&#39;\n\n});\n</code></pre>\n"}}