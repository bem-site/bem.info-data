{"uk":{"name":"next-tick","examples":[],"description":""},"ru":{"name":"next-tick","examples":[],"description":"<h1 id=\"next-tick\"><a href=\"#next-tick\" class=\"anchor\"></a>next-tick</h1>\n<p>Блок предоставляет функцию, производящую асинхронный вызов callback-функции, переданной аргументом, в следующем витке событийного цикла.</p>\n<p><code>next-tick</code> – полифил, реализующий:</p>\n<ul>\n<li>симуляцию событийного цикла для старых версий браузеров;</li>\n<li>унифицированный интерфейс для работы с различными браузерами и NodeJS.</li>\n</ul>\n<p>Функция подходит для случаев, когда нужно, чтобы callback был выполнен после того, как другие функции в рамках событийного цикла отработали. Например, чтобы убедиться что доступны данные, динамически вычислявшиеся в текущем цикле.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>fn {Function}</code> – функция, которую нужно вызвать в следующем событийном цикле. Обязательный аргумент.</li>\n</ul>\n<p>Не имеет возвращаемого значения.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;next-tick&#39;, &#39;events&#39;], function(nextTick, events) {\n\nvar event = new events.Event();\n\nnextTick(function() { event.emit(&#39;click&#39;) }); \n\n// ··· \n\nevent.on(&#39;click&#39;, function(e) { console.log(e.type) })\n});\n</code></pre>\n<h2 id=\"Порядок-вызова-callback\"><a href=\"#Порядок-вызова-callback\" class=\"anchor\"></a>Порядок вызова callback</h2>\n<p>В рамках событийного цикла работы блок формирует очередь, добавляя каждую следующую callback функцию в ее конец. Порядок вызова callback сохраняется.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;next-tick&#39;], function(nextTick) {\n\nvar order = [];\n\nnextTick(function() { order.push(1); });\nnextTick(function() { order.push(2); });\nnextTick(function() { order.push(3); });\nnextTick(function() { console.log(order); }); // should be [1, 2, 3]\n});\n</code></pre>\n<h2 id=\"Публичные-технологии-блока-11\"><a href=\"#Публичные-технологии-блока-11\" class=\"anchor\"></a>Публичные технологии блока</h2>\n<p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n"},"en":{"name":"next-tick","examples":[],"description":"<h1 id=\"next-tick-1\"><a href=\"#next-tick-1\" class=\"anchor\"></a>next-tick</h1>\n<p>This block provides a function that performs an asynchronous call of the callback function passed as an argument in the next tick of the event loop.</p>\n<p><code>next-tick</code> – A polyfill that implements:</p>\n<ul>\n<li>A simulated event loop for outdated browser versions.</li>\n<li>A unified interface for working with various browsers and NodeJS.</li>\n</ul>\n<p>This function works in cases when you need the callback to be invoked after the other functions in the event loop have finished. For example, you need to be sure that data will be available that is dynamically calculated in the current loop.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>fn {Function}</code> – The function to invoke in the next event loop. Required argument.</li>\n</ul>\n<p>No return value.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;next-tick&#39;, &#39;events&#39;], function(nextTick, events) {\n\nvar event = new events.Event();\n\nnextTick(function() { event.emit(&#39;click&#39;) }); \n\n// ··· \n\nevent.on(&#39;click&#39;, function(e) { console.log(e.type) })\n});\n</code></pre>\n<h2 id=\"order-of-callbacks\"><a href=\"#order-of-callbacks\" class=\"anchor\"></a>Order of callbacks</h2>\n<p>The block forms a queue within the event cycle, adding each subsequent callback function to the end of the queue. The callbacks are invoked in order.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;next-tick&#39;], function(nextTick) {\n\nvar order = [];\n\nnextTick(function() { order.push(1); });\nnextTick(function() { order.push(2); });\nnextTick(function() { order.push(3); });\nnextTick(function() { console.log(order); }); // should be [1, 2, 3]\n});\n</code></pre>\n<h2 id=\"public-block-technologies-11\"><a href=\"#public-block-technologies-11\" class=\"anchor\"></a>Public block technologies</h2>\n<p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n"}}