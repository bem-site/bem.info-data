[{"entity":{"block":"vow"},"data":{"jsdocType":"root","modules":[{"jsdocType":"module","name":"vow","author":{"name":"Filatov Dmitry","email":"dfilatov@yandex-team.ru"},"version":"0.4.13","license":"Dual licensed under the MIT and GPL licenses:\n  * http://www.opensource.org/licenses/mit-license.php\n  * http://www.gnu.org/licenses/gpl.html","exports":{"jsdocType":"type","jsType":"Object","props":[{"key":"Deferred","val":{"jsdocType":"class","name":"Deferred","proto":{"jsdocType":"type","jsType":"Object","props":[{"key":"promise","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns the corresponding promise."}},{"key":"resolve","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"examples":["```js\nvar defer = vow.defer(),\n    promise = defer.promise();\n\npromise.then(function(value) {\n    // value is \"'success'\" here\n});\n\ndefer.resolve('success');\n```"],"description":"Resolves the corresponding promise with the given `value`."}},{"key":"reject","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"reason","description":"","jsType":"*"}],"examples":["```js\nvar defer = vow.defer(),\n    promise = defer.promise();\n\npromise.fail(function(reason) {\n    // reason is \"'something is wrong'\" here\n});\n\ndefer.reject('something is wrong');\n```"],"description":"Rejects the corresponding promise with the given `reason`."}},{"key":"notify","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"examples":["```js\nvar defer = vow.defer(),\n    promise = defer.promise();\n\npromise.progress(function(value) {\n    // value is \"'20%'\", \"'40%'\" here\n});\n\ndefer.notify('20%');\ndefer.notify('40%');\n```"],"description":"Notifies the corresponding promise with the given `value`."}}]},"description":"The `Deferred` class is used to encapsulate newly-created promise object along with functions that resolve, reject or notify it.","cons":{"jsdocType":"type","jsType":"Function","description":"You can use `vow.defer()` instead of using this constructor.\n\n`new vow.Deferred()` gives the same result as `vow.defer()`."}}},{"key":"Promise","val":{"jsdocType":"class","name":"Promise","static":{"jsdocType":"type","jsType":"Object","props":[{"key":"cast","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Coerces the given `value` to a promise, or returns the `value` if it's already a promise."}},{"key":"all","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":["Array","Object"]}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise, that will be fulfilled only after all the items in `iterable` are fulfilled.\nIf any of the `iterable` items gets rejected, then the returned promise will be rejected."}},{"key":"race","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":"Array"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise, that will be fulfilled only when any of the items in `iterable` are fulfilled.\nIf any of the `iterable` items gets rejected, then the returned promise will be rejected."}},{"key":"resolve","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise that has already been resolved with the given `value`.\nIf `value` is a promise, the returned promise will have `value`'s state."}},{"key":"reject","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"reason","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise that has already been rejected with the given `reason`."}}]},"proto":{"jsdocType":"type","jsType":"Object","props":[{"key":"valueOf","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"*"},"description":"Returns the value of the fulfilled promise or the reason in case of rejection."}},{"key":"isResolved","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Returns `true` if the promise is resolved."}},{"key":"isFulfilled","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Returns `true` if the promise is fulfilled."}},{"key":"isRejected","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Returns `true` if the promise is rejected."}},{"key":"then","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onProgress","description":"Callback that will be invoked with a provided value after the promise has been notified","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"A new promise, see https://github.com/promises-aplus/promises-spec for details","jsType":"vow:Promise"},"description":"Adds reactions to the promise."}},{"key":"catch","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onRejected","description":"Callback that will be called with a provided 'reason' as argument after the promise has been rejected","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Adds only a rejection reaction. This method is a shorthand for `promise.then(undefined, onRejected)`."}},{"key":"fail","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onRejected","description":"Callback to be called with the value after promise has been rejected","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Adds only a rejection reaction. This method is a shorthand for `promise.then(null, onRejected)`. It's also an alias for `catch`."}},{"key":"always","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onResolved","description":"Callback that will be invoked with the promise as an argument, after the promise has been resolved.","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Adds a resolving reaction (for both fulfillment and rejection)."}},{"key":"progress","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onProgress","description":"Callback that will be called with a provided value when the promise has been notified","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Adds a progress reaction."}},{"key":"spread","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"examples":["```js\nvar defer1 = vow.defer(),\n    defer2 = vow.defer();\n\nvow.all([defer1.promise(), defer2.promise()]).spread(function(arg1, arg2) {\n    // arg1 is \"1\", arg2 is \"'two'\" here\n});\n\ndefer1.resolve(1);\ndefer2.resolve('two');\n```"],"description":"Like `promise.then`, but \"spreads\" the array into a variadic value handler.\nIt is useful with the `vow.all` and the `vow.allResolved` methods."}},{"key":"done","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onProgress","description":"Callback that will be invoked with a provided value after the promise has been notified","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"examples":["```js\nvar defer = vow.defer();\ndefer.reject(Error('Internal error'));\ndefer.promise().done(); // exception to be thrown\n```"],"description":"Like `then`, but terminates a chain of promises.\nIf the promise has been rejected, this method throws it's \"reason\" as an exception in a future turn of the event loop."}},{"key":"delay","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"delay","description":"","jsType":"Number"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a new promise that will be fulfilled in `delay` milliseconds if the promise is fulfilled,\nor immediately rejected if the promise is rejected."}},{"key":"timeout","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"timeout","description":"","jsType":"Number"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"examples":["```js\nvar defer = vow.defer(),\n    promiseWithTimeout1 = defer.promise().timeout(50),\n    promiseWithTimeout2 = defer.promise().timeout(200);\n\nsetTimeout(\n    function() {\n        defer.resolve('ok');\n    },\n    100);\n\npromiseWithTimeout1.fail(function(reason) {\n    // promiseWithTimeout to be rejected in 50ms\n});\n\npromiseWithTimeout2.then(function(value) {\n    // promiseWithTimeout to be fulfilled with \"'ok'\" value\n});\n```"],"description":"Returns a new promise that will be rejected in `timeout` milliseconds\nif the promise is not resolved beforehand."}}]},"description":"The `Promise` class is used when you want to give to the caller something to subscribe to,\nbut not the ability to resolve or reject the deferred.","cons":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"resolver","description":"See https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor for details.","jsType":"Function"}],"examples":["```js\nfunction fetchJSON(url) {\n    return new vow.Promise(function(resolve, reject, notify) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url);\n        xhr.responseType = 'json';\n        xhr.send();\n        xhr.onload = function() {\n            if(xhr.response) {\n                resolve(xhr.response);\n            }\n            else {\n                reject(new TypeError());\n            }\n        };\n    });\n}\n```"],"description":"You should use this constructor directly only if you are going to use `vow` as DOM Promises implementation.\nIn other case you should use `vow.defer()` and `defer.promise()` methods."}}},{"key":"defer","val":{"jsdocType":"type","jsType":"Function","returns":{"jsdocType":"returns","description":"","jsType":"vow:Deferred"},"description":"Creates a new deferred. This method is a factory method for `vow:Deferred` class.\nIt's equivalent to `new vow.Deferred()`."}},{"key":"when","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onProgress","description":"Callback that will be invoked with a provided value after the promise has been notified","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.then`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"fail","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.fail`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"always","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onResolved","description":"Callback that will be invoked with the promise as an argument, after the promise has been resolved.","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.always`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"progress","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onProgress","description":"Callback that will be invoked with a provided value after the promise has been notified","jsType":"Function"},{"jsdocType":"param","name":"ctx","description":"Context of the callback execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.progress`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"spread","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.spread`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"done","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"onFulfilled","description":"Callback that will be invoked with a provided value after the promise has been fulfilled","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onRejected","description":"Callback that will be invoked with a provided reason after the promise has been rejected","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"onProgress","description":"Callback that will be invoked with a provided value after the promise has been notified","jsType":"Function","isOptional":true},{"jsdocType":"param","name":"ctx","description":"Context of the callbacks execution","jsType":"Object","isOptional":true}],"description":"Static equivalent to `promise.done`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"isPromise","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"examples":["```js\nvow.isPromise('something'); // returns false\nvow.isPromise(vow.defer().promise()); // returns true\nvow.isPromise({ then : function() { }); // returns true\n```"],"description":"Checks whether the given `value` is a promise-like object"}},{"key":"cast","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Coerces the given `value` to a promise, or returns the `value` if it's already a promise."}},{"key":"valueOf","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"*"},"description":"Static equivalent to `promise.valueOf`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"isFulfilled","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Static equivalent to `promise.isFulfilled`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"isRejected","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Static equivalent to `promise.isRejected`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"isResolved","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"Boolean"},"description":"Static equivalent to `promise.isResolved`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"resolve","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise that has already been resolved with the given `value`.\nIf `value` is a promise, the returned promise will have `value`'s state."}},{"key":"fulfill","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise that has already been fulfilled with the given `value`.\nIf `value` is a promise, the returned promise will be fulfilled with the fulfill/rejection value of `value`."}},{"key":"reject","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"reason","description":"","jsType":"*"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise that has already been rejected with the given `reason`.\nIf `reason` is a promise, the returned promise will be rejected with the fulfill/rejection value of `reason`."}},{"key":"invoke","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"fn","description":"","jsType":"Function"},{"jsdocType":"param","name":"args","description":"","jsType":"...*","isOptional":true}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"examples":["```js\nvar promise1 = vow.invoke(function(value) {\n        return value;\n    }, 'ok'),\n    promise2 = vow.invoke(function() {\n        throw Error();\n    });\n\npromise1.isFulfilled(); // true\npromise1.valueOf(); // 'ok'\npromise2.isRejected(); // true\npromise2.valueOf(); // instance of Error\n```"],"description":"Invokes the given function `fn` with arguments `args`"}},{"key":"all","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":["Array","Object"]}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"examples":["with array:\n```js\nvar defer1 = vow.defer(),\n    defer2 = vow.defer();\n\nvow.all([defer1.promise(), defer2.promise(), 3])\n    .then(function(value) {\n         // value is \"[1, 2, 3]\" here\n    });\n\ndefer1.resolve(1);\ndefer2.resolve(2);\n```","with object:\n```js\nvar defer1 = vow.defer(),\n    defer2 = vow.defer();\n\nvow.all({ p1 : defer1.promise(), p2 : defer2.promise(), p3 : 3 })\n    .then(function(value) {\n         // value is \"{ p1 : 1, p2 : 2, p3 : 3 }\" here\n    });\n\ndefer1.resolve(1);\ndefer2.resolve(2);\n```"],"description":"Returns a promise, that will be fulfilled only after all the items in `iterable` are fulfilled.\nIf any of the `iterable` items gets rejected, the promise will be rejected."}},{"key":"allResolved","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":["Array","Object"]}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"examples":["```js\nvar defer1 = vow.defer(),\n    defer2 = vow.defer();\n\nvow.allResolved([defer1.promise(), defer2.promise()]).spread(function(promise1, promise2) {\n    promise1.isRejected(); // returns true\n    promise1.valueOf(); // returns \"'error'\"\n    promise2.isFulfilled(); // returns true\n    promise2.valueOf(); // returns \"'ok'\"\n});\n\ndefer1.reject('error');\ndefer2.resolve('ok');\n```"],"description":"Returns a promise, that will be fulfilled only after all the items in `iterable` are resolved."}},{"key":"any","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":"Array"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise, that will be fulfilled if any of the items in `iterable` is fulfilled.\nIf all of the `iterable` items get rejected, the promise will be rejected (with the reason of the first rejected item)."}},{"key":"anyResolved","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"iterable","description":"","jsType":"Array"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Returns a promise, that will be fulfilled only when any of the items in `iterable` is fulfilled.\nIf any of the `iterable` items gets rejected, the promise will be rejected."}},{"key":"delay","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"delay","description":"","jsType":"Number"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.delay`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}},{"key":"timeout","val":{"jsdocType":"type","jsType":"Function","params":[{"jsdocType":"param","name":"value","description":"","jsType":"*"},{"jsdocType":"param","name":"timeout","description":"","jsType":"Number"}],"returns":{"jsdocType":"returns","description":"","jsType":"vow:Promise"},"description":"Static equivalent to `promise.timeout`.\nIf `value` is not a promise, then `value` is treated as a fulfilled promise."}}]}}]}}]