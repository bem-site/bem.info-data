{"uk":{"name":"strings","examples":[],"description":""},"ru":{"name":"strings","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"strings\"><a href=\"#strings\" class=\"article__heading-anchor\"></a>strings</h1><p>Блок предоставляет хелперы для манипуляций с данными строчного типа.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"Обзор-12\"><a href=\"#Обзор-12\" class=\"article__heading-anchor\"></a>Обзор</h2><h3 class=\"article__heading article__heading_3\" id=\"Элементы-блока-10\"><a href=\"#Элементы-блока-10\" class=\"article__heading-anchor\"></a>Элементы блока</h3><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Способы использования</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-escape\">escape</a></td>\n<td><code>JS</code></td>\n<td>Набор методов для экранирования (эскейпинга) управляющих символов XML и HTML.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Свойства-и-методы-элементов-блока-2\"><a href=\"#Свойства-и-методы-элементов-блока-2\" class=\"article__heading-anchor\"></a>Свойства и методы элементов блока</h3><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Имя</th>\n<th>Тип или возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-escape\">escape</a></td>\n<td><a href=\"#elems-escape-fields-xml\">xml</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Служит для экранирования управляющих символов XML.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#elems-escape-fields-html\">html</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Служит для экранирования управляющих символов HTML.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#elems-escape-fields-attr\">attr</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Служит для экранирования управляющих символов в HTML и XML атрибутах.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Публичные-технологии-блока-15\"><a href=\"#Публичные-технологии-блока-15\" class=\"article__heading-anchor\"></a>Публичные технологии блока</h3><p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"Описание-10\"><a href=\"#Описание-10\" class=\"article__heading-anchor\"></a>Описание</h2><p><a name=\"elems\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Элементы-блока-11\"><a href=\"#Элементы-блока-11\" class=\"article__heading-anchor\"></a>Элементы блока</h3><p><a name=\"elems-escape\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Элемент-codeescapecode\"><a href=\"#Элемент-codeescapecode\" class=\"article__heading-anchor\"></a>Элемент <code>escape</code></h4><p>Элемент предоставляет объект, содержащий набор методов для экранирования (эскейпинга) управляющих символов XML и HTML.</p>\n<p><a name=\"elems-name-fields\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Свойства-и-методы-объекта-12\"><a href=\"#Свойства-и-методы-объекта-12\" class=\"article__heading-anchor\"></a>Свойства и методы объекта</h3><p><a name=\"elems-escape-fields-xml\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Метод-codexmlcode\"><a href=\"#Метод-codexmlcode\" class=\"article__heading-anchor\"></a>Метод <code>xml</code></h4><p>Служит для экранирования управляющих символов XML. Обрабатываются символы <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>str {String}</code> – строка для обработки. Обязательный аргумент.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>String</code>. Строка с экранированными управляющими символами.</p>\n<p><a name=\"elems-escape-fields-html\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Метод-codehtmlcode\"><a href=\"#Метод-codehtmlcode\" class=\"article__heading-anchor\"></a>Метод <code>html</code></h4><p>Служит для экранирования управляющих символов HTML. Является синонимом метода <code>xml</code>.</p>\n<p><a name=\"elems-escape-fields-attr\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Метод-codeattrcode\"><a href=\"#Метод-codeattrcode\" class=\"article__heading-anchor\"></a>Метод <code>attr</code></h4><p>Служит для экранирования управляющих символов в HTML и XML атрибутах. Обрабатываются управляющие символы <code>&quot;</code>, <code>\\</code>, <code>&#39;</code>, <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>str {String}</code> – строка для обработки. Обязательный аргумент.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>String</code>. Строка с экранированными управляющими символами.</p>\n<p>Например, в блоке <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/select/select.js#L237\"><code>common.blocks/select</code></a> библиотеки <code>bem-components</code>, <code>strings__escape</code> используется для экранирования управляющих символов в свойстве <code>value</code> HTML-элемента:</p>\n<pre><code class=\"lang-js\">_createControlHTML : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, val</span>) </span>{\n    <span class=\"hljs-comment\">// Using string concatenation to not depend on template engines</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;input '</span> +\n        <span class=\"hljs-string\">'type=\"hidden\" '</span> +\n        <span class=\"hljs-string\">'name=\"'</span> + name + <span class=\"hljs-string\">'\" '</span> +\n        <span class=\"hljs-string\">'class=\"'</span> + <span class=\"hljs-keyword\">this</span>.buildClass(<span class=\"hljs-string\">'control'</span>) + <span class=\"hljs-string\">'\" '</span> +\n        <span class=\"hljs-string\">'value=\"'</span> + <span class=\"hljs-built_in\">escape</span>.attr(<span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">'object'</span>? <span class=\"hljs-built_in\">JSON</span>.stringify(val) : val) + <span class=\"hljs-string\">'\"/&gt;'</span>;\n}\n</code></pre>\n"},"en":{"name":"strings","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"strings-1\"><a href=\"#strings-1\" class=\"article__heading-anchor\"></a>strings</h1><p>This block provides helpers for manipulating string data.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"overview-11\"><a href=\"#overview-11\" class=\"article__heading-anchor\"></a>Overview</h2><h3 class=\"article__heading article__heading_3\" id=\"elements-of-the-block-8\"><a href=\"#elements-of-the-block-8\" class=\"article__heading-anchor\"></a>Elements of the block</h3><table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-escape\">escape</a></td>\n<td><code>JS</code></td>\n<td>A set of methods for escaping XML and HTML control characters.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"properties-and-methods-of-the-block-elements-2\"><a href=\"#properties-and-methods-of-the-block-elements-2\" class=\"article__heading-anchor\"></a>Properties and methods of the block elements</h3><table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Name</th>\n<th>Type or return value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#elems-escape\">escape</a></td>\n<td><a href=\"#elems-escape-fields-xml\">xml</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Use for escaping XML control characters.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#elems-escape-fields-html\">html</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Use for escaping HTML control characters.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#elems-escape-fields-attr\">attr</a>(<code>str {String}</code>)</td>\n<td><code>String</code></td>\n<td>Use for escaping control characters in HTML and XML attributes.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"public-block-technologies-14\"><a href=\"#public-block-technologies-14\" class=\"article__heading-anchor\"></a>Public block technologies</h3><p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"description-10\"><a href=\"#description-10\" class=\"article__heading-anchor\"></a>Description</h2><p><a name=\"elems\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"elements-of-the-block-9\"><a href=\"#elements-of-the-block-9\" class=\"article__heading-anchor\"></a>Elements of the block</h3><p><a name=\"elems-escape\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"codeescapecode-element\"><a href=\"#codeescapecode-element\" class=\"article__heading-anchor\"></a><code>escape</code> element</h4><p>This element provides an object with a set of methods for escaping XML and HTML control characters.</p>\n<p><a name=\"elems-name-fields\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"properties-and-methods-of-the-object-7\"><a href=\"#properties-and-methods-of-the-object-7\" class=\"article__heading-anchor\"></a>Properties and methods of the object</h3><p><a name=\"elems-escape-fields-xml\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"codexmlcode-method\"><a href=\"#codexmlcode-method\" class=\"article__heading-anchor\"></a><code>xml</code> method</h4><p>Use for escaping XML control characters. Processes the symbols <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>str {String}</code> – String to process. Required argument.</li>\n</ul>\n<p><strong>Return value:</strong> <code>String</code>. The string with escaped control characters.</p>\n<p><a name=\"elems-escape-fields-html\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"codehtmlcode-method\"><a href=\"#codehtmlcode-method\" class=\"article__heading-anchor\"></a><code>html</code> method</h4><p>Use for escaping HTML control characters. It is a synonym of the <code>xml</code> method.</p>\n<p><a name=\"elems-escape-fields-attr\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"codeattrcode-method\"><a href=\"#codeattrcode-method\" class=\"article__heading-anchor\"></a><code>attr</code> method</h4><p>Use for escaping control characters in HTML and XML attributes. Processes the control characters <code>&quot;</code>, <code>\\</code>, <code>&#39;</code>, <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>str {String}</code> – String to process. Required argument.</li>\n</ul>\n<p><strong>Return value:</strong> <code>String</code>. The string with escaped control characters.</p>\n<p>For example, in the <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/select/select.js#L237\"><code>common.blocks/select</code></a> block in the <code>bem-components</code> library, <code>strings__escape</code> is used for escaping control characters in the <code>value</code> property of an HTML element:</p>\n<pre><code class=\"lang-js\">_createControlHTML : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, val</span>) </span>{\n    <span class=\"hljs-comment\">// Using string concatenation to not depend on template engines</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;input '</span> +\n        <span class=\"hljs-string\">'type=\"hidden\" '</span> +\n        <span class=\"hljs-string\">'name=\"'</span> + name + <span class=\"hljs-string\">'\" '</span> +\n        <span class=\"hljs-string\">'class=\"'</span> + <span class=\"hljs-keyword\">this</span>.buildClass(<span class=\"hljs-string\">'control'</span>) + <span class=\"hljs-string\">'\" '</span> +\n        <span class=\"hljs-string\">'value=\"'</span> + <span class=\"hljs-built_in\">escape</span>.attr(<span class=\"hljs-keyword\">typeof</span> val === <span class=\"hljs-string\">'object'</span>? <span class=\"hljs-built_in\">JSON</span>.stringify(val) : val) + <span class=\"hljs-string\">'\"/&gt;'</span>;\n}\n</code></pre>\n"}}