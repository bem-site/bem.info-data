{"uk":{"name":"inherit","examples":[],"description":""},"ru":{"name":"inherit","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"inherit-4\"><a href=\"#inherit-4\" class=\"article__heading-anchor\"></a>inherit</h1><p>Блок предоставляет функцию, реализующую механизмы для объявления и наследования классов.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"Обзор-39\"><a href=\"#Обзор-39\" class=\"article__heading-anchor\"></a>Обзор</h2><h3 class=\"article__heading article__heading_3\" id=\"Способы-использования-функции-4\"><a href=\"#Способы-использования-функции-4\" class=\"article__heading-anchor\"></a>Способы использования функции</h3><table>\n<thead>\n<tr>\n<th>Способ</th>\n<th>Сигнатура</th>\n<th>Тип возвращаемого значения</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#runmode-declare\">Объявление базового класса</a></td>\n<td>inherit(<br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Служит для создания (декларации), базового класса на основе свойств объекта.</td>\n</tr>\n<tr>\n<td><a href=\"#runmode-extend\">Создание производного класса</a></td>\n<td>inherit(<br><code>BaseClass {Function}</code>&#124;<code>{Array}</code>, <br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Позволяет наследовать и доопределять свойства и методы базового класса.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Специальные-поля-объявляемого-класса-4\"><a href=\"#Специальные-поля-объявляемого-класса-4\" class=\"article__heading-anchor\"></a>Специальные поля объявляемого класса</h3><table>\n<thead>\n<tr>\n<th>Имя</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#constructor\">__constructor</a></td>\n<td><code>Function</code></td>\n<td>Функция, которая будет вызвана в ходе создании экземпляра класса.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Специальные-поля-экземпляра-объявляемого-класса-4\"><a href=\"#Специальные-поля-экземпляра-объявляемого-класса-4\" class=\"article__heading-anchor\"></a>Специальные поля экземпляра объявляемого класса</h3><table>\n<thead>\n<tr>\n<th>Поле</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#self\">__self</a></td>\n<td><code>*</code></td>\n<td>Позволяет получить доступ к классу из его экземпляра.</td>\n</tr>\n<tr>\n<td><a href=\"#base\">__base</a></td>\n<td><code>Function</code></td>\n<td>Позволяет внутри производного класса использовать методы базового (supercall).</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Публичные-технологии-блока-49\"><a href=\"#Публичные-технологии-блока-49\" class=\"article__heading-anchor\"></a>Публичные технологии блока</h3><p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"Описание-31\"><a href=\"#Описание-31\" class=\"article__heading-anchor\"></a>Описание</h2><p>Функция <code>inherit</code> позволяет:</p>\n<ul>\n<li>создавать класс по декларации;</li>\n<li>задавать метод-конструктор;</li>\n<li>использовать миксины;</li>\n<li>вызывать методы базовой реализации (super call);</li>\n<li>получать доступ к статическим свойствам класса из его экземпляра.</li>\n</ul>\n<p>Блок является основой механизма наследования блоков в <code>bem-core</code>.</p>\n<p>Функция полиморфна и, в зависимости от типа первого аргумента, может быть использована для:</p>\n<ul>\n<li>тип <code>Object</code> – объявления базового класса.</li>\n<li>тип <code>Function</code> – создания производного класса на основе базового.</li>\n</ul>\n<p>Сигнатуры других аргументов функции зависят от способа выполнения.</p>\n<h3 class=\"article__heading article__heading_3\" id=\"Способы-использования-функции-5\"><a href=\"#Способы-использования-функции-5\" class=\"article__heading-anchor\"></a>Способы использования функции</h3><p><a name=\"runmode-declare\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Объявление-базового-класса-2\"><a href=\"#Объявление-базового-класса-2\" class=\"article__heading-anchor\"></a>Объявление базового класса</h4><p>Способ позволяет объявить базовый класс, передав функции объект со свойствами класса.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>props {Object}</code> – объект с собственными свойствами базового класса. Обязательный аргумент.</li>\n<li>[<code>staticProps {Object}</code>] – объект со статическими свойствами базового класса.</li>\n</ul>\n<p><strong>Возвращаемое значение:</strong> <code>Function</code>. Полностью сформированный класс.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> props = {}, <span class=\"hljs-comment\">// объект свойств базового класса</span>\n    baseClass = inherit(props); <span class=\"hljs-comment\">// базовый класс</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Базовый-класс-со-статическими-свойствами-2\"><a href=\"#Базовый-класс-со-статическими-свойствами-2\" class=\"article__heading-anchor\"></a>Базовый класс со статическими свойствами</h5><p>Свойства объекта <code>staticProps</code> добавляются как статические к создаваемому классу.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit(props, {\n    <span class=\"hljs-attr\">callMe</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'mr.Static'</span>);\n    }\n});\n\nA.callMe(); <span class=\"hljs-comment\">// mr.Static</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Специальные-поля-объявляемого-класса-5\"><a href=\"#Специальные-поля-объявляемого-класса-5\" class=\"article__heading-anchor\"></a>Специальные поля объявляемого класса</h5><p><a name=\"constructor\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"Поле-__constructor-2\"><a href=\"#Поле-__constructor-2\" class=\"article__heading-anchor\"></a>Поле <code>__constructor</code></h6><p>Тип: <code>Function</code>.</p>\n<p>Объект собственных свойств базового класса может содержать зарезервированное свойство <code>__constructor</code> – функцию, которая будет автоматически вызвана при создании экземпляра класса.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">__constructor</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">property</span>) </span>{ <span class=\"hljs-comment\">// конструктор</span>\n            <span class=\"hljs-keyword\">this</span>.property = property;\n        },\n\n        <span class=\"hljs-attr\">getProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.property + <span class=\"hljs-string\">' of instanceA'</span>;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A(<span class=\"hljs-string\">'Property'</span>);\n\naInst.getProperty(); <span class=\"hljs-comment\">// Property of instanceA</span>\n\n});\n</code></pre>\n<p><a name=\"runmode-extend\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Создание-производного-класса-2\"><a href=\"#Создание-производного-класса-2\" class=\"article__heading-anchor\"></a>Создание производного класса</h4><p>Способ позволяет создать производный класс на основе базового класса и объектов статических и собственных свойств.</p>\n<p><strong>Принимаемые аргументы:</strong></p>\n<ul>\n<li><code>BaseClass {Function} | {Array}</code> – базовый класс. Может быть массивом функций-миксинов. Обязательный аргумент.</li>\n<li><code>props {Object}</code> – собственные свойства (добавляются к прототипу). Обязательный аргумент.</li>\n<li>[<code>staticProps {Object}</code>] – статические свойства.</li>\n</ul>\n<p>Если один из объектов содержит свойства, которые уже есть в базовом классе – свойства базового класса будут переопределены.</p>\n<p><strong>Возвращаемое значение:</strong> <code>Function</code>. Производный класс.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Создание-производного-класса-с-миксинами-2\"><a href=\"#Создание-производного-класса-с-миксинами-2\" class=\"article__heading-anchor\"></a>Создание производного класса с миксинами</h5><p>При объявлении производного класса можно указать дополнительный набор функций. Их свойства будут примешаны к создаваемому классу. Для этого первым аргументом <code>inherit</code> нужно указать массив, первым элементом которого должен быть базовый класс, а последующими – примешиваемые функции.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getA</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> B = inherit({\n    <span class=\"hljs-attr\">getB</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A и B</span>\n<span class=\"hljs-keyword\">var</span> C = inherit([A, B], {\n    <span class=\"hljs-attr\">getAll</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getA() + <span class=\"hljs-keyword\">this</span>.getB();\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfC = <span class=\"hljs-keyword\">new</span> C();\n\ninstanceOfC.getAll(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Специальные-поля-экземпляра-объявляемого-класса-5\"><a href=\"#Специальные-поля-экземпляра-объявляемого-класса-5\" class=\"article__heading-anchor\"></a>Специальные поля экземпляра объявляемого класса</h5><p><a name=\"self\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"Поле-__self-2\"><a href=\"#Поле-__self-2\" class=\"article__heading-anchor\"></a>Поле <code>__self</code></h6><p>Тип: <code>*</code>.</p>\n<p>Позволяет получить доступ к классу из его экземпляра.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">getStaticProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__self.staticMethod; <span class=\"hljs-comment\">// доступ к статическим методам</span>\n        }\n    }, {\n        <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n        <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A();\n\naInst.getStaticProperty(); <span class=\"hljs-comment\">//staticA</span>\n\n});\n</code></pre>\n<p><a name=\"base\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"code__base-4\"><a href=\"#code__base-4\" class=\"article__heading-anchor\"></a><code>__base</code></h6><p>Тип: <code>Function</code>.</p>\n<p>Позволяет внутри производного класса вызывать одноименные методы базового (supercall). При использовании в статическом методе, будет вызван одноименный статический метод базового класса.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n}, {\n    <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n}, {\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// статическое переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">' of staticB'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\nB.staticMethod(); <span class=\"hljs-comment\">// возвращает 'staticA of staticB'</span>\n\n});\n</code></pre>\n<p><a name=\"extra-examples\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Дополнительные-примеры-2\"><a href=\"#Дополнительные-примеры-2\" class=\"article__heading-anchor\"></a>Дополнительные примеры</h3><p>Дополнительные примеры смотрите в репозитории библиотеки <a href=\"https://github.com/dfilatov/inherit\">inherit</a>.</p>\n"},"en":{"name":"inherit","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"inherit-5\"><a href=\"#inherit-5\" class=\"article__heading-anchor\"></a>inherit</h1><p>This block provides a function for declaring and inheriting classes.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"overview-35\"><a href=\"#overview-35\" class=\"article__heading-anchor\"></a>Overview</h2><h3 class=\"article__heading article__heading_3\" id=\"usage-8\"><a href=\"#usage-8\" class=\"article__heading-anchor\"></a>Usage</h3><table>\n<thead>\n<tr>\n<th>Use</th>\n<th>Signature</th>\n<th>Return type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#runmode-declare\">Declaring a base class</a></td>\n<td>inherit(<br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Use for creating (declaring) a base class from the object properties.</td>\n</tr>\n<tr>\n<td><a href=\"#runmode-extend\">Creating a derived class</a></td>\n<td>inherit(<br><code>BaseClass {Function}</code>&#124;<code>{Array}</code>, <br><code>props {Object}</code>, <br><code>[staticProps {Object}]</code>)</td>\n<td><code>Function</code></td>\n<td>Use for inheriting and redefining the properties and methods of a base class.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"special-fields-of-the-declared-class-4\"><a href=\"#special-fields-of-the-declared-class-4\" class=\"article__heading-anchor\"></a>Special fields of the declared class</h3><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Data type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#constructor\">__constructor</a></td>\n<td><code>Function</code></td>\n<td>The function that will be called when creating a class instance.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"special-fields-of-the-declared-class-instance-4\"><a href=\"#special-fields-of-the-declared-class-instance-4\" class=\"article__heading-anchor\"></a>Special fields of the declared class instance</h3><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Data type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#self\">__self</a></td>\n<td><code>*</code></td>\n<td>Allows you to access the class and its instance.</td>\n</tr>\n<tr>\n<td><a href=\"#base\">__base</a></td>\n<td><code>Function</code></td>\n<td>Allows you to use the methods of the base class inside the derived class (super call).</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"public-block-technologies-45\"><a href=\"#public-block-technologies-45\" class=\"article__heading-anchor\"></a>Public block technologies</h3><p>The block is implemented in:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"description-31\"><a href=\"#description-31\" class=\"article__heading-anchor\"></a>Description</h2><p>Use the <code>inherit</code> function to:</p>\n<ul>\n<li>Create a class using a declaration.</li>\n<li>Set a constructor method.</li>\n<li>Use mix-ins.</li>\n<li>Call the methods of the base implementation (super call).</li>\n<li>Get access to static properties of a class from its instance.</li>\n</ul>\n<p>This is the main block inheritance mechanism in <code>bem-core</code>.</p>\n<p>The function is polymorphic and, depending on the first argument type, it can be used for:</p>\n<ul>\n<li><code>Object</code> type – declaring the base class.</li>\n<li><code>Function</code> type – deriving a class from the base class.</li>\n</ul>\n<p>The signature of the function&#39;s other arguments depends on how it is run.</p>\n<h3 class=\"article__heading article__heading_3\" id=\"usage-9\"><a href=\"#usage-9\" class=\"article__heading-anchor\"></a>Usage</h3><p><a name=\"runmode-declare\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"declaring-a-base-class-2\"><a href=\"#declaring-a-base-class-2\" class=\"article__heading-anchor\"></a>Declaring a base class</h4><p>This approach allows you to define the base class by passing the function an object with the class properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>props {Object}</code> – An object with its own properties for the base class. Required argument.</li>\n<li>[<code>staticProps {Object}</code>] – An object with static properties of the base class.</li>\n</ul>\n<p><strong>Return value:</strong> <code>Function</code>. The fully-formed class.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> props = {}, <span class=\"hljs-comment\">// object for the base class properties</span>\n    baseClass = inherit(props); <span class=\"hljs-comment\">// base class</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"base-class-with-static-properties-2\"><a href=\"#base-class-with-static-properties-2\" class=\"article__heading-anchor\"></a>Base class with static properties</h5><p>Properties of the <code>staticProps</code> object are added as static properties for the class being created.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit(props, {\n    <span class=\"hljs-attr\">callMe</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'mr.Static'</span>);\n    }\n});\n\nA.callMe(); <span class=\"hljs-comment\">// mr.Static</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"special-fields-of-the-declared-class-5\"><a href=\"#special-fields-of-the-declared-class-5\" class=\"article__heading-anchor\"></a>Special fields of the declared class</h5><p><a name=\"constructor\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"code__constructor-field-2\"><a href=\"#code__constructor-field-2\" class=\"article__heading-anchor\"></a><code>__constructor</code> field</h6><p>Type: <code>Function</code>.</p>\n<p>The object with the base class properties can contain the reserved <code>__constructor</code> property, a function that is called automatically when a class instance is created.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">__constructor</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">property</span>) </span>{ <span class=\"hljs-comment\">// constructor</span>\n            <span class=\"hljs-keyword\">this</span>.property = property;\n        },\n\n        <span class=\"hljs-attr\">getProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.property + <span class=\"hljs-string\">' of instanceA'</span>;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A(<span class=\"hljs-string\">'Property'</span>);\n\naInst.getProperty(); <span class=\"hljs-comment\">// Property of instanceA</span>\n\n});\n</code></pre>\n<p><a name=\"runmode-extend\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"creating-a-derived-class-2\"><a href=\"#creating-a-derived-class-2\" class=\"article__heading-anchor\"></a>Creating a derived class</h4><p>This approach allows you to create a derived class from the base class and the objects with the static properties and the custom properties.</p>\n<p><strong>Accepted arguments:</strong></p>\n<ul>\n<li><code>BaseClass {Function} | {Array}</code> – The base class. Can be an array of mix-in functions. Required argument.</li>\n<li><code>props {Object}</code> – Custom properties (added to the prototype). Required argument.</li>\n<li>[<code>staticProps {Object}</code>] – Static properties.</li>\n</ul>\n<p>If one of the objects contains properties that already exist in the base class, the base class properties are redefined.</p>\n<p><strong>Return value:</strong> <code>Function</code>. Derived class.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// class derived from A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// redefinition + super call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// returns 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"creating-a-derived-class-with-mix-ins-2\"><a href=\"#creating-a-derived-class-with-mix-ins-2\" class=\"article__heading-anchor\"></a>Creating a derived class with mix-ins</h5><p>When declaring a derived class, you can specify an additional set of functions. Their properties will be mixed in to the created class. To do this, the first argument for <code>inherit</code> should specify an array that has the base class as its first element, followed by the functions to mix in.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getA</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> B = inherit({\n    <span class=\"hljs-attr\">getB</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// class derived from A and B</span>\n<span class=\"hljs-keyword\">var</span> C = inherit([A, B], {\n    <span class=\"hljs-attr\">getAll</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getA() + <span class=\"hljs-keyword\">this</span>.getB();\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfC = <span class=\"hljs-keyword\">new</span> C();\n\ninstanceOfC.getAll(); <span class=\"hljs-comment\">// returns 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"special-fields-of-the-declared-class-instance-5\"><a href=\"#special-fields-of-the-declared-class-instance-5\" class=\"article__heading-anchor\"></a>Special fields of the declared class instance</h5><p><a name=\"self\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"code__self-field-2\"><a href=\"#code__self-field-2\" class=\"article__heading-anchor\"></a><code>__self</code> field</h6><p>Type: <code>*</code>.</p>\n<p>Allows you to access the class and its instance.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">getStaticProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__self.staticMethod; <span class=\"hljs-comment\">// access to static methods</span>\n        }\n    }, {\n        <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n        <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A();\n\naInst.getStaticProperty(); <span class=\"hljs-comment\">//staticA</span>\n\n});\n</code></pre>\n<p><a name=\"base\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"code__base-5\"><a href=\"#code__base-5\" class=\"article__heading-anchor\"></a><code>__base</code></h6><p>Type: <code>Function</code>.</p>\n<p>Allows you to call base class methods inside the derived class (super call). When used in a static method, it will call the static method of the same name in the base class.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n}, {\n    <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n    }\n});\n\n<span class=\"hljs-comment\">// class derived from A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// redefinition + super call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n}, {\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// static redefinition + super call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">' of staticB'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// returns 'AB'</span>\nB.staticMethod(); <span class=\"hljs-comment\">// returns 'staticA of staticB'</span>\n\n});\n</code></pre>\n<p><a name=\"extra-examples\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"more-examples-2\"><a href=\"#more-examples-2\" class=\"article__heading-anchor\"></a>More examples</h3><p>For more examples, see the repository of the <a href=\"https://github.com/dfilatov/inherit\">inherit</a> library.</p>\n"}}
