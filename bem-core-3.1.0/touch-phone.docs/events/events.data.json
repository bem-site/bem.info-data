{"uk":{"name":"events","examples":[],"description":""},"ru":{"name":"events","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"events-1\"><a href=\"#events-1\" class=\"article__heading-anchor\"></a>events</h1><p>Блок предоставляет набор JS-классов, реализующий механизмы работы с событиями.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"Обзор-19\"><a href=\"#Обзор-19\" class=\"article__heading-anchor\"></a>Обзор</h2><h3 class=\"article__heading article__heading_3\" id=\"Классы-предоставляемые-блоком-1\"><a href=\"#Классы-предоставляемые-блоком-1\" class=\"article__heading-anchor\"></a>Классы, предоставляемые блоком</h3><table>\n<thead>\n<tr>\n<th>Класс</th>\n<th>Конструктор</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td>Event(<br><code>{String} type</code>, <br><code>{Object} target</code>)</td>\n<td>Служит для создания объекта события, изменения и проверки его состояний.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td>-</td>\n<td>Служит для генерации событий и подписки на них.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Свойства-и-методы-объекта-класса-3\"><a href=\"#Свойства-и-методы-объекта-класса-3\" class=\"article__heading-anchor\"></a>Свойства и методы объекта класса</h3><table>\n<thead>\n<tr>\n<th>Класс</th>\n<th>Имя</th>\n<th>Тип или возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#class-Event\">Event</a></td>\n<td><a href=\"#fields-type\">type</a></td>\n<td>{String}</td>\n<td>Тип события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-result\">result</a></td>\n<td><code>{*}</code></td>\n<td>Результат, возвращенный последним обработчиком события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-target\">target</a></td>\n<td>{Object}</td>\n<td>Объект на котором возникло событие.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-data\">data</a></td>\n<td><code>{*}</code></td>\n<td>Данные, передаваемые как аргумент обработчику.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-preventDefault\">preventDefault</a>()</td>\n<td>-</td>\n<td>Позволяет предотвратить выполнение стандартного действия предусмотренного для события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isDefaultPrevented\">isDefaultPrevented</a>()</td>\n<td><code>{Boolean}</code></td>\n<td>Проверяет, было ли предотвращено выполнение стандартного действия, предусмотренного для события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-stopPropagation\">stopPropagation</a>()</td>\n<td>-</td>\n<td>Позволяет остановить всплывание события.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-isPropagationStopped\">isPropagationStopped</a>()</td>\n<td><code>{Boolean}</code></td>\n<td>Проверяет, было ли остановлено всплывание события.</td>\n</tr>\n<tr>\n<td><a href=\"#class-Emitter\">Emitter</a></td>\n<td><a href=\"#fields-on\">on</a>(<br><code>{String} type</code>, <br><code>[{Object} data]</code>, <br><code>{Function} fn</code>, <br><code>[{Object} ctx]</code>)</td>\n<td>-</td>\n<td>Служит для подписки на событие определенного типа.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-once\">once</a>(<br><code>{String} type</code>, <br><code>[{Object} data]</code>, <br><code>{Function} fn</code>, <br><code>[{Object} ctx]</code>)</td>\n<td>-</td>\n<td>Служит для подписки на событие определенного типа. Обработчик выполняется единожды.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-un\">un</a>(<br><code>{String} type</code>, <br><code>{Function} fn</code>, <br><code>[{Object} ctx]</code>)</td>\n<td>-</td>\n<td>Служит для удаления подписки на событие определенного типа.</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"#fields-emit\">emit</a>(<br><code>{String</code>&#124;<code>events:Event} type</code>, <br><code>[{Object} data]</code>)</td>\n<td>-</td>\n<td>Служит для генерации события.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Элементы-блока-16\"><a href=\"#Элементы-блока-16\" class=\"article__heading-anchor\"></a>Элементы блока</h3><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Способы использования</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#Элемент-channels-блока-events\">channels</a></td>\n<td><code>JS</code></td>\n<td>Предназначен для работы с именованными каналами событий.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Функции-предоставляемые-элементами-блока-1\"><a href=\"#Функции-предоставляемые-элементами-блока-1\" class=\"article__heading-anchor\"></a>Функции предоставляемые элементами блока</h3><table>\n<thead>\n<tr>\n<th>Элемент</th>\n<th>Функция</th>\n<th>Возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#Элемент-channels-блока-events\">channels</a></td>\n<td>channels(<br><code>[{String} id]</code>, <br><code>[{Boolean} drop]</code>)</td>\n<td><code>{Object}</code>&#124;<code>{undefined}</code></td>\n<td>Создает или удаляет именованный канал событий.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Публичные-технологии-блока-24\"><a href=\"#Публичные-технологии-блока-24\" class=\"article__heading-anchor\"></a>Публичные технологии блока</h3><p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"Подробности-13\"><a href=\"#Подробности-13\" class=\"article__heading-anchor\"></a>Подробности</h2><p><a name=\"class-Event\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Класс-codeeventcode-1\"><a href=\"#Класс-codeeventcode-1\" class=\"article__heading-anchor\"></a>Класс <code>Event</code></h3><p>С помощью класса можно инстанцировать объект события, указав его тип и источник. Для этого нужно воспользоваться функцией-конструктором <code>Event</code>.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>type</code> <code>{String}</code> – тип события. Обязательный аргумент.</li>\n<li><code>target</code> <code>{Object}</code> – объект (источник) на котором событие возникло. Обязательный аргумент.</li>\n</ul>\n<p>Возвращаемое значение: <code>{Event}</code>. Объект события.</p>\n<p><a name=\"fields-Event\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Свойства-и-методы-объекта-класса-4\"><a href=\"#Свойства-и-методы-объекта-класса-4\" class=\"article__heading-anchor\"></a>Свойства и методы объекта класса</h4><p><a name=\"fields-type\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Свойство-codetypecode-1\"><a href=\"#Свойство-codetypecode-1\" class=\"article__heading-anchor\"></a>Свойство <code>type</code></h5><p>Тип: <code>{String}</code>.</p>\n<p>Тип события.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myevent = <span class=\"hljs-keyword\">new</span> events.Event(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-keyword\">this</span>);\n<span class=\"hljs-built_in\">console</span>.log(myevent.type); <span class=\"hljs-comment\">// 'myevent'</span>\n\n});\n</code></pre>\n<p><a name=\"fields-type\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Свойство-codetargetcode-1\"><a href=\"#Свойство-codetargetcode-1\" class=\"article__heading-anchor\"></a>Свойство <code>target</code></h5><p>Тип: <code>{Object}</code>.</p>\n<p>Объект, на котором возникло событие.</p>\n<p><a name=\"fields-result\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Свойство-coderesultcode-1\"><a href=\"#Свойство-coderesultcode-1\" class=\"article__heading-anchor\"></a>Свойство <code>result</code></h5><p>Тип: <code>{*}</code>.</p>\n<p>Содержит данные, возвращаемые последней функцией-обработчиком события.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hi-hi-hi'</span>; });\n\n<span class=\"hljs-keyword\">var</span> myEvent = <span class=\"hljs-keyword\">new</span> events.Event(<span class=\"hljs-string\">'myevent'</span>);\nmyEmitter.emit(myEvent)\n\n<span class=\"hljs-built_in\">console</span>.log(myEvent.result);    <span class=\"hljs-comment\">// 'hi-hi-hi'</span>\n\n});\n</code></pre>\n<p><a name=\"fields-data\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Свойство-codedatacode-1\"><a href=\"#Свойство-codedatacode-1\" class=\"article__heading-anchor\"></a>Свойство <code>data</code></h5><p>Тип: <code>{*}</code>.</p>\n<p>Содержит данные, передаваемые функции-обработчику события в качестве аргумента.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-string\">'my-data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(e.data); });\n\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// my-data</span>\n\n});\n</code></pre>\n<p><a name=\"fields-preventDefault\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codepreventdefaultcode-1\"><a href=\"#Метод-codepreventdefaultcode-1\" class=\"article__heading-anchor\"></a>Метод <code>preventDefault</code></h5><p>Позволяет предотвратить выполнение стандартного действия предусмотренного для события.</p>\n<p>Не принимает аргументов.</p>\n<p>Не имеет возвращаемого значения.</p>\n<p><a name=\"fields-isDefaultPrevented\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeisdefaultpreventedcode-1\"><a href=\"#Метод-codeisdefaultpreventedcode-1\" class=\"article__heading-anchor\"></a>Метод <code>isDefaultPrevented</code></h5><p>Позволяет проверить было ли предотвращено выполнение стандартного действия для события.</p>\n<p>Не принимает аргументов.</p>\n<p>Возвращаемое значение: <code>{Boolean}</code>. В случае, если выполнение стандартного действия было предотвращено – <code>true</code>.</p>\n<p><a name=\"fields-stopPropagation\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codestoppropagationcode-1\"><a href=\"#Метод-codestoppropagationcode-1\" class=\"article__heading-anchor\"></a>Метод <code>stopPropagation</code></h5><p>Позволяет остановить всплывание события.</p>\n<p>Не принимает аргументов.</p>\n<p>Не имеет возвращаемого значения.</p>\n<p><a name=\"fields-isPropagationStopped\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeispropagationstoppedcode-1\"><a href=\"#Метод-codeispropagationstoppedcode-1\" class=\"article__heading-anchor\"></a>Метод <code>isPropagationStopped</code></h5><p>Позволяет проверить, было ли остановлено всплывание события.</p>\n<p>Не принимает аргументов.</p>\n<p>Возвращаемое значение: <code>{Boolean}</code>. В случае, если всплывание события было остановлено – <code>true</code>.</p>\n<p><a name=\"class-Emitter\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Класс-codeemittercode-1\"><a href=\"#Класс-codeemittercode-1\" class=\"article__heading-anchor\"></a>Класс <code>Emitter</code></h3><p>Класс позволяет инстанцировать объекты, с помощью которых можно генерировать события и осуществлять подписку на них.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\n});\n</code></pre>\n<p><a name=\"fields-Event\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Свойства-и-методы-объекта-класса-5\"><a href=\"#Свойства-и-методы-объекта-класса-5\" class=\"article__heading-anchor\"></a>Свойства и методы объекта класса</h4><p><a name=\"fields-on\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeoncode-1\"><a href=\"#Метод-codeoncode-1\" class=\"article__heading-anchor\"></a>Метод <code>on</code></h5><p>Служит для подписки на событие определенного типа.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>{String}</code> <code>type</code> – тип события, на которое производится подписка. Обязательный аргумент.</li>\n<li>[<code>{Object}</code> <code>data</code>] – дополнительные данные, доступные обработчику как значение поля <code>e.data</code> объекта события.</li>\n<li><code>{Function}</code> <code>fn</code> – функция-обработчик, вызываемая для события. Обязательный аргумент.</li>\n<li>[<code>{Object}</code> <code>ctx</code>] – контекст функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>); });\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// 'foo'</span>\n\n});\n</code></pre>\n<p>Кроме того, значением аргумента <code>type</code> могут быть:</p>\n<ul>\n<li>несколько типов событий, перечисленных через пробел – чтобы установить для них общую функцию-обработчик;</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\nmyEmitter.on(<span class=\"hljs-string\">'myevent1 myevent2'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(e.type) });\n\nmyEmitter.emit(<span class=\"hljs-string\">'myevent1'</span>); <span class=\"hljs-comment\">// 'myevent1'</span>\nmyEmitter.emit(<span class=\"hljs-string\">'myevent2'</span>); <span class=\"hljs-comment\">// 'myevent2'</span>\n\n});\n</code></pre>\n<ul>\n<li>хеш вида <code>{ &#39;событие-1&#39; : обработчик-1, ... , &#39;событие-n&#39; : обработчик-n }</code> – чтобы установить сразу несколько обработчиков для разных типов событий;</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\nmyEmitter.on({\n    <span class=\"hljs-attr\">myevent1</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(e.type) },\n    <span class=\"hljs-attr\">myevent2</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(e.type) }\n});  \n\nmyEmitter.emit(<span class=\"hljs-string\">'myevent1'</span>); <span class=\"hljs-comment\">// 'myevent1'</span>\nmyEmitter.emit(<span class=\"hljs-string\">'myevent2'</span>); <span class=\"hljs-comment\">// 'myevent2'</span>\n\n});\n</code></pre>\n<p>Сказанное выше верно и для методов <code>once</code> и <code>un</code>.</p>\n<p><a name=\"fields-once\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeoncecode-1\"><a href=\"#Метод-codeoncecode-1\" class=\"article__heading-anchor\"></a>Метод <code>once</code></h5><p>Идентичен методу <code>on</code>, но выполняется единожды – после первого события подписка удаляется.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>{String}</code> <code>type</code> – тип события, на которое производится подписка. Обязательный аргумент.</li>\n<li>[<code>{Object}</code> <code>data</code>] – дополнительные данные, доступные как значение поля <code>e.data</code> объекта события.</li>\n<li><code>{Function}</code> <code>fn</code> – функция-обработчик, вызываемая для события. Обязательный аргумент.</li>\n<li>[<code>{Object}</code> <code>ctx</code>] – контекст функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>) });\n\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// 'foo'</span>\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// обработчик не вызывается</span>\n\n});\n</code></pre>\n<p><a name=\"fields-un\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeuncode-1\"><a href=\"#Метод-codeuncode-1\" class=\"article__heading-anchor\"></a>Метод <code>un</code></h5><p>Служит для удаления установленной ранее подписки на событие определенного типа.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>{String}</code> <code>type</code> – тип события, подписка на которое удаляется. Обязательный аргумент.</li>\n<li>[<code>{Function}</code> <code>fn</code>] – удаляемый обработчик.</li>\n<li>[<code>{Object}</code> <code>ctx</code>] – контекст обработчика.</li>\n</ul>\n<p>Метод возвращает ссылку на объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter(),\n    shout = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>) };\n\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, shout);\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// 'foo'</span>\n\nmyEmitter.un(<span class=\"hljs-string\">'myevent'</span>, shout);\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>); <span class=\"hljs-comment\">// обработчик не вызывается</span>\n\n});\n</code></pre>\n<p><a name=\"fields-emit\"></a></p>\n<h5 class=\"article__heading article__heading_5\" id=\"Метод-codeemitcode-1\"><a href=\"#Метод-codeemitcode-1\" class=\"article__heading-anchor\"></a>Метод <code>emit</code></h5><p>Служит для генерации события.</p>\n<p>Метод вызывает все функции-обработчики, заданные для события.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>{String|events:Event}</code> <code>type</code> – генерируемое событие в виде строки или готового объекта события. Обязательный аргумент.</li>\n<li>[<code>{Object}</code> <code>data</code>] – дополнительные данные, доступные как второй аргумент функции-обработчика.</li>\n</ul>\n<p>Возвращает объект <code>this</code>.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">events</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myEmitter = <span class=\"hljs-keyword\">new</span> events.Emitter();\n\nmyEmitter.on(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, data</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(data) });\nmyEmitter.emit(<span class=\"hljs-string\">'myevent'</span>, <span class=\"hljs-string\">'ololo'</span>);  <span class=\"hljs-comment\">// 'ololo'</span>\n\n});\n</code></pre>\n<h4 class=\"article__heading article__heading_4\" id=\"Статические-методы-класса-1\"><a href=\"#Статические-методы-класса-1\" class=\"article__heading-anchor\"></a>Статические методы класса</h4><p>Набор и сигнатуры статических методов идентичны набору и сигнатурам методов объекта, инстанцируемого классом.</p>\n\n<h1 class=\"article__heading article__heading_1\" id=\"Элемент-codechannelscode-блока-codeeventscode-1\"><a href=\"#Элемент-codechannelscode-блока-codeeventscode-1\" class=\"article__heading-anchor\"></a>Элемент <code>channels</code> блока <code>events</code></h1><p>Элемент <code>channels</code> блока <code>events</code> предназначен для работы с именованными каналами событий. Именные каналы позволяют организовать работу с событиями, используя шаблон проектирования «наблюдатель» (также известный как Publisher-subscriber).</p>\n<p>Элемент реализует функцию, позволяющую:</p>\n<ul>\n<li>получить ссылку на именной канал по <code>id</code>;</li>\n<li>получить ссылку на стандартный канал;</li>\n<li>удалить канал – стандартный или по <code>id</code>.</li>\n</ul>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li>[<code>{String}</code> <code>id</code>] – Идентификатор канала. Если не задан будет использоваться канал по умолчанию (<code>&#39;default&#39;</code>).</li>\n<li>[<code>{Boolean}</code> <code>drop</code>] – Логический флаг, указывающий (в значении <code>true</code>) на необходимость удалить канал. По умолчанию <code>false</code>.</li>\n</ul>\n<p>Возвращаемое значение:</p>\n<ul>\n<li><code>{Object}</code>. Объект «класса» <code>Emitter</code> – именной канал.</li>\n<li><code>{undefined}</code>. В случае если функция была вызвана с параметром <code>drop</code> в значении <code>true</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'events__channels'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">channels</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> myChannel = channels(<span class=\"hljs-string\">'my-channel'</span>);\nmyChannel.on(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, data</span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(data.foo) });\n\nmyChannel.emit(<span class=\"hljs-string\">'test'</span>, { <span class=\"hljs-attr\">foo</span> : <span class=\"hljs-string\">'bar'</span> }); <span class=\"hljs-comment\">// 'bar'</span>\n\n});\n</code></pre>\n"},"en":{"name":"events","examples":[],"description":""}}