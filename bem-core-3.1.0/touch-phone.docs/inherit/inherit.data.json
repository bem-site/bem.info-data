{"uk":{"name":"inherit","examples":[],"description":""},"ru":{"name":"inherit","examples":[],"description":"<h1 class=\"article__heading article__heading_1\" id=\"inherit-1\"><a href=\"#inherit-1\" class=\"article__heading-anchor\"></a>inherit</h1><p>Блок предоставляет функцию, реализующую механизмы для объявления и наследования классов.</p>\n<h2 class=\"article__heading article__heading_2\" id=\"Обзор-21\"><a href=\"#Обзор-21\" class=\"article__heading-anchor\"></a>Обзор</h2><h3 class=\"article__heading article__heading_3\" id=\"Способы-использования-функции-2\"><a href=\"#Способы-использования-функции-2\" class=\"article__heading-anchor\"></a>Способы использования функции</h3><table>\n<thead>\n<tr>\n<th>Способ</th>\n<th>Сигнатура</th>\n<th>Возвращаемое значение</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#runmode-declare\">Объявление базового класса</a></td>\n<td>inherit(<br><code>{Object} props</code>, <br><code>[{Object} staticProps]</code>)</td>\n<td><code>{Function}</code></td>\n<td>Служит для создания (декларации), базового класса на основе свойств объекта.</td>\n</tr>\n<tr>\n<td><a href=\"#runmode-extend\">Создание производного класса</a></td>\n<td>inherit(<br><code>{Function} </code>&#124;<code> {Array} BaseClass</code>, <br><code>{Object} props</code>, <br><code>[{Object} staticProps]</code>)</td>\n<td><code>{Function}</code></td>\n<td>Позволяет наследовать и доопределять свойства и методы базового класса.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Специализированные-поля-объявляемого-класса-2\"><a href=\"#Специализированные-поля-объявляемого-класса-2\" class=\"article__heading-anchor\"></a>Специализированные поля объявляемого класса</h3><table>\n<thead>\n<tr>\n<th>Имя</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#fields-__constructor\">__constructor</a></td>\n<td><code>{Function}</code></td>\n<td>Функция, которая будет вызвана в ходе создании экземпляра класса.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Специализированные-поля-экземпляра-объявляемого-класса-2\"><a href=\"#Специализированные-поля-экземпляра-объявляемого-класса-2\" class=\"article__heading-anchor\"></a>Специализированные поля экземпляра объявляемого класса</h3><table>\n<thead>\n<tr>\n<th>Поле</th>\n<th>Тип данных</th>\n<th>Описание</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#declfields-__self\">__self</a></td>\n<td><code>{*}</code></td>\n<td>Позволяет получить доступ к классу из его экземпляра.</td>\n</tr>\n<tr>\n<td><a href=\"#declfields-__base\">__base</a></td>\n<td><code>{Function}</code></td>\n<td>Позволяет внутри производного класса использовать методы базового (supercall).</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"article__heading article__heading_3\" id=\"Публичные-технологии-блока-25\"><a href=\"#Публичные-технологии-блока-25\" class=\"article__heading-anchor\"></a>Публичные технологии блока</h3><p>Блок реализован в технологиях:</p>\n<ul>\n<li><code>vanilla.js</code></li>\n</ul>\n<h2 class=\"article__heading article__heading_2\" id=\"Подробности-16\"><a href=\"#Подробности-16\" class=\"article__heading-anchor\"></a>Подробности</h2><p>Функция <code>inherit</code> позволяет:</p>\n<ul>\n<li>создавать класс по декларации;</li>\n<li>задавать метод-конструктор;</li>\n<li>использовать миксины;</li>\n<li>вызывать методы базовой реализации (super call);</li>\n<li>получать доступ к статическим свойствам класса из его экземпляра.</li>\n</ul>\n<p>Блок является основой механизма наследования блоков в <code>bem-core</code>.</p>\n<p>Функция полиморфна и, в зависимости от типа первого аргумента, может быть использована для:</p>\n<ul>\n<li>тип <code>{Object}</code> – объявления базового класса.</li>\n<li>тип <code>{Function}</code> – создания производного класса на основе базового.</li>\n</ul>\n<p>Сигнатуры других аргументов функции зависят от способа выполнения.</p>\n<h3 class=\"article__heading article__heading_3\" id=\"Способы-использования-функции-3\"><a href=\"#Способы-использования-функции-3\" class=\"article__heading-anchor\"></a>Способы использования функции</h3><p><a name=\"runmode-declare\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Объявление-базового-класса-1\"><a href=\"#Объявление-базового-класса-1\" class=\"article__heading-anchor\"></a>Объявление базового класса</h4><p>Способ позволяет объявить базовый класс, передав функции объект со свойствами класса.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>props</code> <code>{Object}</code> – объект с собственными свойствами базового класса. Обязательный аргумент.</li>\n<li>[<code>staticProps</code> <code>{Object}</code>] – объект со статическими свойствами базового класса.</li>\n</ul>\n<p>Возвращаемое значение: <code>{Function}</code>. Полностью сформированный класс.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> props = {}, <span class=\"hljs-comment\">// объект свойств базового класса</span>\n    baseClass = inherit(props); <span class=\"hljs-comment\">// базовый класс</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Базовый-класс-со-статическими-свойствами-1\"><a href=\"#Базовый-класс-со-статическими-свойствами-1\" class=\"article__heading-anchor\"></a>Базовый класс со статическими свойствами</h5><p>Свойства объекта <code>staticProps</code> добавляются как статические к создаваемому классу:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit(props, {\n    <span class=\"hljs-attr\">callMe</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'mr.Static'</span>);\n    }\n});\n\nA.callMe(); <span class=\"hljs-comment\">// mr.Static</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Специализированные-поля-объявляемого-класса-3\"><a href=\"#Специализированные-поля-объявляемого-класса-3\" class=\"article__heading-anchor\"></a>Специализированные поля объявляемого класса</h5><p><a name=\"fields-__constructor\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"Поле-code__constructorcode-1\"><a href=\"#Поле-code__constructorcode-1\" class=\"article__heading-anchor\"></a>Поле <code>__constructor</code></h6><p>Тип: <code>{Function}</code>. Объект собственных свойств базового класса может содержать зарезервированное свойство <code>__constructor</code> – функцию, которая будет автоматически вызвана при создании экземпляра класса.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">__constructor</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">property</span>) </span>{ <span class=\"hljs-comment\">// конструктор</span>\n            <span class=\"hljs-keyword\">this</span>.property = property;\n        },\n\n        <span class=\"hljs-attr\">getProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.property + <span class=\"hljs-string\">' of instanceA'</span>;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A(<span class=\"hljs-string\">'Property'</span>);\n\naInst.getProperty(); <span class=\"hljs-comment\">// Property of instanceA</span>\n\n});\n</code></pre>\n<p><a name=\"runmode-extend\"></a></p>\n<h4 class=\"article__heading article__heading_4\" id=\"Создание-производного-класса-1\"><a href=\"#Создание-производного-класса-1\" class=\"article__heading-anchor\"></a>Создание производного класса</h4><p>Способ позволяет создать производный класс на основе базового класса и объектов статических и собственных свойств.</p>\n<p>Принимаемые аргументы:</p>\n<ul>\n<li><code>BaseClass</code> <code>{Function} | {Array}</code> – базовый класс. Может быть массивом функций-миксинов. Обязательный аргумент.</li>\n<li><code>props</code> <code>{Object}</code> – собственные свойства (добавляются к прототипу). Обязательный аргумент.</li>\n<li>[<code>staticProps</code> <code>{Object}</code>] – статические свойства.</li>\n</ul>\n<p>Если один из объектов содержит свойства, которые уже есть в базовом классе – свойства базового класса будут переопределены.</p>\n<p>Возвращаемое значение: <code>{Function}</code>. Производный класс.</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Создание-производного-класса-с-миксинами-1\"><a href=\"#Создание-производного-класса-с-миксинами-1\" class=\"article__heading-anchor\"></a>Создание производного класса с миксинами</h5><p>При объявлении производного класса можно указать дополнительный набор функций. Их свойства будут примешаны к создаваемому классу. Для этого первым аргументом <code>inherit</code> нужно указать массив, первым элементом которого должен быть базовый класс, а последующими – примешиваемые функции:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getA</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> B = inherit({\n    <span class=\"hljs-attr\">getB</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'B'</span>;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A и B</span>\n<span class=\"hljs-keyword\">var</span> C = inherit([A, B], {\n    <span class=\"hljs-attr\">getAll</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getA() + <span class=\"hljs-keyword\">this</span>.getB();\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfC = <span class=\"hljs-keyword\">new</span> C();\n\ninstanceOfC.getAll(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\n\n});\n</code></pre>\n<h5 class=\"article__heading article__heading_5\" id=\"Специализированные-поля-экземпляра-объявляемого-класса-3\"><a href=\"#Специализированные-поля-экземпляра-объявляемого-класса-3\" class=\"article__heading-anchor\"></a>Специализированные поля экземпляра объявляемого класса</h5><p><a name=\"declfields-__self\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"Поле-code__selfcode-1\"><a href=\"#Поле-code__selfcode-1\" class=\"article__heading-anchor\"></a>Поле <code>__self</code></h6><p>Тип: <code>*</code>.</p>\n<p>Позволяет получить доступ к классу из его экземпляра:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n        <span class=\"hljs-attr\">getStaticProperty</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__self.staticMethod; <span class=\"hljs-comment\">// доступ к статическим методам</span>\n        }\n    }, {    \n        <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n        <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n        }\n    }),\n    aInst = <span class=\"hljs-keyword\">new</span> A();\n\naInst.getStaticProperty(); <span class=\"hljs-comment\">//staticA</span>\n\n});\n</code></pre>\n<p><a name=\"declfields-__base\"></a></p>\n<h6 class=\"article__heading article__heading_6\" id=\"code__basecode-1\"><a href=\"#code__basecode-1\" class=\"article__heading-anchor\"></a><code>__base</code></h6><p>Тип: <code>{Function}</code>.</p>\n<p>Позволяет внутри производного класса вызывать одноименные методы базового (supercall). При использовании в статическом методе, будет вызван одноименный статический метод базового класса:</p>\n<pre><code class=\"lang-js\">modules.require([<span class=\"hljs-string\">'inherit'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inherit</span>) </span>{\n\n<span class=\"hljs-keyword\">var</span> A = inherit({\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'A'</span>;\n    }\n}, {    \n    <span class=\"hljs-attr\">staticProperty</span> : <span class=\"hljs-string\">'staticA'</span>,\n\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.staticProperty;\n    }\n});\n\n<span class=\"hljs-comment\">// класс, производный от A</span>\n<span class=\"hljs-keyword\">var</span> B = inherit(A, {\n    <span class=\"hljs-attr\">getType</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">'B'</span>;\n    }\n}, {\n    <span class=\"hljs-attr\">staticMethod</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">// статическое переопределение + 'super' call</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.__base() + <span class=\"hljs-string\">' of staticB'</span>;\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> instanceOfB = <span class=\"hljs-keyword\">new</span> B();\n\ninstanceOfB.getType(); <span class=\"hljs-comment\">// возвращает 'AB'</span>\nB.staticMethod(); <span class=\"hljs-comment\">// возвращает 'staticA of staticB'</span>\n\n});\n</code></pre>\n<p><a name=\"extra-examples\"></a></p>\n<h3 class=\"article__heading article__heading_3\" id=\"Дополнительные-примеры-1\"><a href=\"#Дополнительные-примеры-1\" class=\"article__heading-anchor\"></a>Дополнительные примеры</h3><p>Дополнительные примеры смотрите в репозитории библиотеки <a href=\"https://github.com/dfilatov/inherit\">inherit</a>.</p>\n"},"en":{"name":"inherit","examples":[],"description":""}}